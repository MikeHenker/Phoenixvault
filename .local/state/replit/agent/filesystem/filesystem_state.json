{"file_contents":{"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 218 25% 12%;\n\n  --foreground: 210 15% 92%;\n\n  --border: 218 15% 18%;\n\n  --card: 218 20% 15%;\n\n  --card-foreground: 210 15% 92%;\n\n  --card-border: 218 15% 20%;\n\n  --sidebar: 218 25% 13%;\n\n  --sidebar-foreground: 210 15% 92%;\n\n  --sidebar-border: 218 15% 18%;\n\n  --sidebar-primary: 217 91% 55%;\n\n  --sidebar-primary-foreground: 217 91% 98%;\n\n  --sidebar-accent: 218 20% 20%;\n\n  --sidebar-accent-foreground: 210 15% 95%;\n\n  --sidebar-ring: 217 91% 55%;\n\n  --popover: 218 20% 16%;\n\n  --popover-foreground: 210 15% 92%;\n\n  --popover-border: 218 15% 22%;\n\n  --primary: 217 91% 55%;\n\n  --primary-foreground: 217 91% 98%;\n\n  --secondary: 218 15% 25%;\n\n  --secondary-foreground: 210 15% 92%;\n\n  --muted: 218 15% 22%;\n\n  --muted-foreground: 210 10% 65%;\n\n  --accent: 262 83% 58%;\n\n  --accent-foreground: 262 83% 98%;\n\n  --destructive: 0 72% 50%;\n\n  --destructive-foreground: 0 72% 98%;\n\n  --input: 218 15% 25%;\n  --ring: 217 91% 48%;\n  --chart-1: 217 91% 48%;\n  --chart-2: 262 83% 58%;\n  --chart-3: 173 58% 39%;\n  --chart-4: 43 74% 49%;\n  --chart-5: 27 87% 50%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Roboto Mono', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 10% 10% / 0.02);\n  --shadow-xs: 0px 1px 2px 0px hsl(220 10% 10% / 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 10% 10% / 0.08), 0px 1px 2px -1px hsl(220 10% 10% / 0.08);\n  --shadow: 0px 2px 4px -1px hsl(220 10% 10% / 0.08), 0px 4px 6px -1px hsl(220 10% 10% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(220 10% 10% / 0.08), 0px 2px 4px -2px hsl(220 10% 10% / 0.08);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 10% 10% / 0.08), 0px 4px 6px -4px hsl(220 10% 10% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 10% 10% / 0.08), 0px 8px 10px -6px hsl(220 10% 10% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 10% 10% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 218 28% 8%;\n\n  --foreground: 210 15% 95%;\n\n  --border: 218 15% 14%;\n\n  --card: 218 22% 11%;\n\n  --card-foreground: 210 15% 95%;\n\n  --card-border: 218 15% 16%;\n\n  --sidebar: 218 28% 9%;\n\n  --sidebar-foreground: 210 15% 95%;\n\n  --sidebar-border: 218 15% 14%;\n\n  --sidebar-primary: 217 91% 58%;\n\n  --sidebar-primary-foreground: 217 91% 98%;\n\n  --sidebar-accent: 218 20% 16%;\n\n  --sidebar-accent-foreground: 210 15% 98%;\n\n  --sidebar-ring: 217 91% 58%;\n\n  --popover: 218 22% 12%;\n\n  --popover-foreground: 210 15% 95%;\n\n  --popover-border: 218 15% 18%;\n\n  --primary: 217 91% 58%;\n\n  --primary-foreground: 217 91% 98%;\n\n  --secondary: 218 15% 20%;\n\n  --secondary-foreground: 210 15% 95%;\n\n  --muted: 218 15% 18%;\n\n  --muted-foreground: 210 10% 70%;\n\n  --accent: 262 83% 62%;\n\n  --accent-foreground: 262 83% 98%;\n\n  --destructive: 0 72% 55%;\n\n  --destructive-foreground: 0 72% 98%;\n\n  --input: 218 15% 22%;\n  --ring: 217 91% 52%;\n  --chart-1: 217 91% 62%;\n  --chart-2: 262 83% 68%;\n  --chart-3: 173 58% 55%;\n  --chart-4: 43 74% 62%;\n  --chart-5: 27 87% 62%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 10% 3% / 0.15);\n  --shadow-xs: 0px 1px 2px 0px hsl(220 10% 3% / 0.20);\n  --shadow-sm: 0px 1px 3px 0px hsl(220 10% 3% / 0.25), 0px 1px 2px -1px hsl(220 10% 3% / 0.25);\n  --shadow: 0px 2px 4px -1px hsl(220 10% 3% / 0.25), 0px 4px 6px -1px hsl(220 10% 3% / 0.30);\n  --shadow-md: 0px 4px 6px -1px hsl(220 10% 3% / 0.25), 0px 2px 4px -2px hsl(220 10% 3% / 0.25);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 10% 3% / 0.30), 0px 4px 6px -4px hsl(220 10% 3% / 0.25);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 10% 3% / 0.35), 0px 8px 10px -6px hsl(220 10% 3% / 0.30);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 10% 3% / 0.50);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9884},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/register.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Gamepad2, Lock, User, Key } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User as UserType } from \"@shared/schema\";\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [licenseKey, setLicenseKey] = useState(\"\");\n\n  const { data: session } = useQuery<{ user: UserType | null }>({\n    queryKey: [\"/api/session\"],\n  });\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (session?.user) {\n      setLocation(\"/\");\n    }\n  }, [session, setLocation]);\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: { username: string; password: string; licenseKey: string }) => {\n      return await apiRequest(\"POST\", \"/api/auth/register\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Registration successful!\",\n        description: \"Your account is pending admin approval. You'll be able to log in once approved.\",\n      });\n      setLocation(\"/login\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate({ username, password, licenseKey });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-6\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-16 h-16 rounded-lg bg-primary/10 flex items-center justify-center\">\n              <Gamepad2 className=\"w-8 h-8 text-primary\" />\n            </div>\n          </div>\n          <h1\n            className=\"text-3xl font-bold mb-2\"\n            style={{ fontFamily: \"Montserrat, sans-serif\" }}\n            data-testid=\"text-register-title\"\n          >\n            Join Phoenix Games\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-register-subtitle\">\n            Create your account with a valid license key\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle data-testid=\"text-create-account-title\">Create Account</CardTitle>\n            <CardDescription data-testid=\"text-create-account-description\">\n              You need a valid license key to register\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"username\" data-testid=\"label-register-username\">\n                  Username\n                </Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Choose a username\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    className=\"pl-10\"\n                    required\n                    data-testid=\"input-register-username\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" data-testid=\"label-register-password\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10\"\n                    required\n                    data-testid=\"input-register-password\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"licenseKey\" data-testid=\"label-license-key\">\n                  License Key\n                </Label>\n                <div className=\"relative\">\n                  <Key className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"licenseKey\"\n                    type=\"text\"\n                    placeholder=\"Enter your beta license key\"\n                    value={licenseKey}\n                    onChange={(e) => setLicenseKey(e.target.value)}\n                    className=\"pl-10 font-mono\"\n                    required\n                    data-testid=\"input-license-key\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"button-register\"\n              >\n                {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-login-prompt\">\n                Already have an account?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto\"\n                  onClick={() => setLocation(\"/auth/login\")}\n                  data-testid=\"button-login-link\"\n                >\n                  Sign in here\n                </Button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6394},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"design_guidelines.md":{"content":"# Design Guidelines: Steam/Epic Games-Inspired Game Distribution Platform\n\n## Design Approach\n**Reference-Based**: Drawing primary inspiration from Steam and Epic Games Store, with emphasis on their sophisticated dark interfaces, bold typography, and immersive gaming-focused experiences. This platform prioritizes visual impact and discoverability while maintaining utility for admin functions.\n\n## Typography System\n\n**Display & Headers**\n- Hero/Featured: Bold sans-serif at 48-56px (Montserrat Bold or similar via Google Fonts)\n- Section Headers: Semi-bold 32-40px\n- Card Titles: Bold 18-20px\n- Button Text: Semi-bold 14-16px uppercase with letter-spacing\n\n**Body & UI**\n- Primary Body: Regular 14-16px (Inter or Roboto)\n- Captions/Meta: Regular 12-14px\n- Admin Forms: Medium 14px\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24 for consistent rhythm\n- Component padding: p-4 to p-8\n- Section spacing: py-12 to py-24\n- Card gaps: gap-6 to gap-8\n- Container max-width: max-w-7xl with px-6\n\n## Core Components\n\n### Navigation Header\nFull-width sticky header with:\n- Platform logo (left)\n- Primary navigation links (Library, Store, Community)\n- Search bar (center-right, expandable)\n- User profile dropdown (right) showing license status badge\n- Admin panel link (visible only for admin)\nHeight: h-16 to h-20\n\n### Hero Section (Landing Page)\nLarge featured game showcase:\n- Full-width container with max-w-7xl\n- Height: 60vh to 70vh\n- Featured game background (blur overlay for readability)\n- Left-aligned content area (max-w-2xl):\n  - Game title (56px bold)\n  - Tagline/description (18px)\n  - CTA buttons with backdrop blur (Download Now, Learn More)\n- Right side: Featured game trailer/screenshot preview\n\n### Game Cards (Library Grid)\nPrimary game display format:\n- Fixed aspect ratio container (460x215 standard)\n- Image overlay with gradient on hover\n- Bottom info bar:\n  - Game title (bold 18px)\n  - Category tags (small badges)\n  - Download/Play button (appears on hover)\n- Grid layout: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\n- Card spacing: gap-6\n\n### Admin Dashboard Layout\nTwo-column layout:\n- Left sidebar (w-64):\n  - Navigation menu (Dashboard, Games, Licenses, Users, Analytics)\n  - Active state indicators\n  - Logout button at bottom\n- Main content area:\n  - Page header with title and action button\n  - Statistics cards (4-column grid for metrics)\n  - Data tables with alternating row styling\n  - Form sections with clear field groupings\n\n### License Management Interface\n- License key display: Monospace font, copyable cards\n- Status badges (Active/Expired/Revoked) as pill shapes\n- Creation form: Single-column with focused inputs\n- License list: Table view with search and filter bar\n\n### Game Detail Modal/Page\nLarge modal overlay or dedicated page:\n- Hero image section (full-width, 40vh)\n- Two-column content below:\n  - Left (2/3): Description, features, screenshots gallery\n  - Right (1/3): Sidebar with download button, metadata, system requirements\n- Screenshots: Horizontal scrollable gallery with thumbnails\n\n### User Library View\nPersonalized game collection:\n- Filter bar (All Games, Recently Played, Categories)\n- Sort dropdown (Alphabetical, Recently Added, Most Played)\n- Game grid matching store layout\n- \"Continue Playing\" section at top (horizontal scroll)\n- Empty state with invitation to browse store\n\n### Admin Game Management\nForm-based interface:\n- Large input sections with clear labels\n- Image URL preview (shows 460x215 ratio)\n- Rich text editor for description\n- Tag selector (multi-select dropdown)\n- Category assignment\n- Download link configuration\n- Save/Cancel action bar (sticky bottom)\n\n## Component Library\n\n**Buttons**\n- Primary: Large padding (px-8 py-4), bold text, full corner radius\n- Secondary: Outlined style, same sizing\n- Icon buttons: Square (h-12 w-12) for utility actions\n- Backdrop blur applied to buttons over images\n\n**Form Inputs**\n- Height: h-12 for text inputs\n- Border radius: rounded-lg\n- Focus states: Ring offset for clarity\n- Labels: Above input, semi-bold 14px\n- Validation messages: Below field, 12px\n\n**Cards**\n- Container: Rounded corners (rounded-xl)\n- Padding: p-6 for content cards\n- Shadow: Elevated appearance on hover\n- Borders: Subtle 1px outline\n\n**Badges/Tags**\n- Pill shape (rounded-full)\n- Small padding (px-3 py-1)\n- Uppercase 11px text\n- Used for: Categories, license status, game tags\n\n**Data Tables**\n- Header row: Bold, uppercase 12px\n- Row height: h-16\n- Alternating row treatment for readability\n- Hover state on rows\n- Action buttons in rightmost column\n\n**Modals/Overlays**\n- Backdrop: Semi-transparent overlay\n- Modal width: max-w-4xl for game details, max-w-md for confirmations\n- Close button: Top-right corner (X icon)\n- Padding: p-8\n\n## Images\n\n**Hero Section Image**\n- Large hero image required for landing page\n- Blurred version as background with sharp featured game artwork overlay\n- Placement: Full-width background with content overlay\n- Format: High-quality gaming artwork or screenshot\n\n**Game Card Images**\n- Mandatory 460x215 ratio for all game cards\n- Display in grid layout across library\n- Hover effect reveals additional info overlay\n- Placeholder for games without images: Solid background with game title\n\n**Additional Images**\n- Game detail screenshots: 16:9 ratio, gallery format\n- User avatars: Circular, 40x40px in header, 80x80px in profile\n- Admin analytics: Chart visualizations for metrics\n\n## Animation Strategy\n\nUse sparingly for polish:\n- Card hover: Subtle lift (transform scale 1.02)\n- Button interactions: Quick opacity transitions\n- Modal entry/exit: Smooth fade and scale\n- Page transitions: None (instant navigation preferred for speed)\n\n## Responsive Behavior\n\nDesktop-first approach (gaming platforms are desktop-primary):\n- Desktop (1280px+): Full 4-column game grid, expanded sidebar\n- Laptop (1024px): 3-column grid, condensed sidebar\n- Tablet (768px): 2-column grid, collapsible sidebar\n- Mobile (640px-): Single column, hamburger menu, stacked layout\n\n## Key Screens Layout\n\n**Landing Page**: Hero → Featured Games Carousel → Recently Added Grid → Categories Section → Footer\n**Library**: Filter Bar → Continue Playing (horizontal) → All Games Grid\n**Admin Dashboard**: Sidebar → Stats Cards → Quick Actions → Recent Activity Table\n**Game Detail**: Hero Image → Two-column (Description | Download Sidebar) → Screenshots Gallery → Related Games\n\nThis design creates an immersive, professional gaming platform experience that balances visual impact with administrative functionality.","size_bytes":6610},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/storage.ts":{"content":"import {\n  users,\n  licenses,\n  games,\n  downloads,\n  userLibrary,\n  reviews,\n  wishlist,\n  screenshots,\n  activities,\n  follows,\n  achievements,\n  userAchievements,\n  playtime,\n  comments,\n  type User,\n  type InsertUser,\n  type License,\n  type InsertLicense,\n  type Game,\n  type InsertGame,\n  type Download,\n  type InsertDownload,\n  type UserLibrary,\n  type InsertUserLibrary,\n  type Review,\n  type InsertReview,\n  type Wishlist,\n  type InsertWishlist,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<User>): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n\n  // Licenses\n  getLicense(key: string): Promise<License | undefined>;\n  getLicenseById(id: string): Promise<License | undefined>;\n  createLicense(license: InsertLicense): Promise<License>;\n  getAllLicenses(): Promise<License[]>;\n  updateLicense(id: string, data: Partial<License>): Promise<License>;\n\n  // Games\n  getGame(id: string): Promise<Game | undefined>;\n  getAllGames(): Promise<Game[]>;\n  createGame(game: InsertGame): Promise<Game>;\n  updateGame(id: string, data: Partial<InsertGame>): Promise<Game>;\n  deleteGame(id: string): Promise<void>;\n\n  // Downloads\n  createDownload(download: InsertDownload): Promise<Download>;\n  getDownloadsByUser(userId: string): Promise<Download[]>;\n  getTotalDownloads(): Promise<number>;\n\n  // User Library\n  addToLibrary(data: InsertUserLibrary): Promise<UserLibrary>;\n  removeFromLibrary(userId: string, gameId: string): Promise<void>;\n  updateLibraryEntry(userId: string, gameId: string, data: { hasLocalFiles?: boolean; exePath?: string }): Promise<UserLibrary>;\n  getUserLibrary(userId: string): Promise<UserLibrary[]>;\n  isInLibrary(userId: string, gameId: string): Promise<boolean>;\n\n  // Reviews and Ratings\n  createReview(review: InsertReview): Promise<Review>;\n  updateReview(id: string, data: Partial<InsertReview>): Promise<Review>;\n  deleteReview(id: string): Promise<void>;\n  getGameReviews(gameId: string): Promise<Review[]>;\n  getUserReview(userId: string, gameId: string): Promise<Review | undefined>;\n  updateGameRating(gameId: string): Promise<void>;\n\n  // Wishlist\n  addToWishlist(data: InsertWishlist): Promise<Wishlist>;\n  removeFromWishlist(userId: string, gameId: string): Promise<void>;\n  getUserWishlist(userId: string): Promise<Wishlist[]>;\n  isInWishlist(userId: string, gameId: string): Promise<boolean>;\n\n  // Bulk operations\n  bulkDeleteGames(gameIds: string[]): Promise<void>;\n  bulkToggleGameActive(gameIds: string[], isActive: boolean): Promise<void>;\n\n  // Screenshots\n  createScreenshot(data: any): Promise<any>;\n  getGameScreenshots(gameId: string): Promise<any[]>;\n  deleteScreenshot(id: string, userId: string): Promise<void>;\n\n  // Stats\n  getStats(): Promise<{\n    totalUsers: number;\n    totalLicenses: number;\n    activeLicenses: number;\n    totalGames: number;\n    totalDownloads: number;\n  }>;\n  getDownloadStats(): Promise<Array<{ gameId: string; gameTitle: string; downloads: number }>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set(data)\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  // Licenses\n  async getLicense(key: string): Promise<License | undefined> {\n    const [license] = await db.select().from(licenses).where(eq(licenses.key, key));\n    return license || undefined;\n  }\n\n  async getLicenseById(id: string): Promise<License | undefined> {\n    const [license] = await db.select().from(licenses).where(eq(licenses.id, id));\n    return license || undefined;\n  }\n\n  async createLicense(insertLicense: InsertLicense): Promise<License> {\n    const [license] = await db.insert(licenses).values(insertLicense).returning();\n    return license;\n  }\n\n  async getAllLicenses(): Promise<License[]> {\n    return await db.select().from(licenses).orderBy(desc(licenses.createdAt));\n  }\n\n  async updateLicense(id: string, data: Partial<License>): Promise<License> {\n    const [license] = await db\n      .update(licenses)\n      .set(data)\n      .where(eq(licenses.id, id))\n      .returning();\n    return license;\n  }\n\n  // Games\n  async getGame(id: string): Promise<Game | undefined> {\n    const [game] = await db.select().from(games).where(eq(games.id, id));\n    return game || undefined;\n  }\n\n  async getAllGames(): Promise<Game[]> {\n    return await db.select().from(games).orderBy(desc(games.createdAt));\n  }\n\n  async createGame(insertGame: InsertGame): Promise<Game> {\n    const [game] = await db.insert(games).values(insertGame).returning();\n    return game;\n  }\n\n  async updateGame(id: string, data: Partial<InsertGame>): Promise<Game> {\n    const [game] = await db\n      .update(games)\n      .set(data)\n      .where(eq(games.id, id))\n      .returning();\n    return game;\n  }\n\n  async deleteGame(id: string): Promise<void> {\n    // First delete all downloads associated with this game\n    await db.delete(downloads).where(eq(downloads.gameId, id));\n    // Then delete the game\n    await db.delete(games).where(eq(games.id, id));\n  }\n\n  // Downloads\n  async createDownload(insertDownload: InsertDownload): Promise<Download> {\n    const [download] = await db.insert(downloads).values(insertDownload).returning();\n    return download;\n  }\n\n  async getDownloadsByUser(userId: string): Promise<Download[]> {\n    return await db.select().from(downloads).where(eq(downloads.userId, userId));\n  }\n\n  async getTotalDownloads(): Promise<number> {\n    const result = await db.select({ count: sql<number>`count(*)` }).from(downloads);\n    return Number(result[0].count);\n  }\n\n  // User Library\n  async addToLibrary(data: InsertUserLibrary): Promise<UserLibrary> {\n    const [library] = await db.insert(userLibrary).values(data).returning();\n    return library;\n  }\n\n  async removeFromLibrary(userId: string, gameId: string): Promise<void> {\n    await db\n      .delete(userLibrary)\n      .where(\n        and(\n          eq(userLibrary.userId, userId),\n          eq(userLibrary.gameId, gameId)\n        )\n      );\n  }\n\n  async updateLibraryEntry(userId: string, gameId: string, data: { hasLocalFiles?: boolean; exePath?: string }): Promise<UserLibrary> {\n    const [entry] = await db\n      .update(userLibrary)\n      .set(data)\n      .where(\n        and(\n          eq(userLibrary.userId, userId),\n          eq(userLibrary.gameId, gameId)\n        )\n      )\n      .returning();\n    return entry;\n  }\n\n  async getUserLibrary(userId: string): Promise<UserLibrary[]> {\n    return await db.select().from(userLibrary).where(eq(userLibrary.userId, userId));\n  }\n\n  async isInLibrary(userId: string, gameId: string): Promise<boolean> {\n    const [result] = await db\n      .select()\n      .from(userLibrary)\n      .where(sql`${userLibrary.userId} = ${userId} AND ${userLibrary.gameId} = ${gameId}`);\n    return !!result;\n  }\n\n  // Reviews and Ratings\n  async createReview(insertReview: InsertReview): Promise<Review> {\n    const [review] = await db.insert(reviews).values(insertReview).returning();\n    await this.updateGameRating(insertReview.gameId);\n    return review;\n  }\n\n  async updateReview(id: string, data: Partial<InsertReview>): Promise<Review> {\n    const [review] = await db\n      .update(reviews)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(reviews.id, id))\n      .returning();\n    if (review) {\n      await this.updateGameRating(review.gameId);\n    }\n    return review;\n  }\n\n  async deleteReview(id: string): Promise<void> {\n    const [review] = await db.select().from(reviews).where(eq(reviews.id, id));\n    if (review) {\n      await db.delete(reviews).where(eq(reviews.id, id));\n      await this.updateGameRating(review.gameId);\n    }\n  }\n\n  async getGameReviews(gameId: string): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.gameId, gameId)).orderBy(desc(reviews.createdAt));\n  }\n\n  async getUserReview(userId: string, gameId: string): Promise<Review | undefined> {\n    const [review] = await db\n      .select()\n      .from(reviews)\n      .where(sql`${reviews.userId} = ${userId} AND ${reviews.gameId} = ${gameId}`);\n    return review || undefined;\n  }\n\n  async updateGameRating(gameId: string): Promise<void> {\n    const gameReviews = await db.select().from(reviews).where(eq(reviews.gameId, gameId));\n\n    if (gameReviews.length === 0) {\n      await db\n        .update(games)\n        .set({ averageRating: 0, totalRatings: 0 })\n        .where(eq(games.id, gameId));\n      return;\n    }\n\n    const totalRating = gameReviews.reduce((sum, review) => sum + review.rating, 0);\n    const averageRating = Math.round(totalRating / gameReviews.length);\n\n    await db\n      .update(games)\n      .set({\n        averageRating,\n        totalRatings: gameReviews.length,\n      })\n      .where(eq(games.id, gameId));\n  }\n\n  // Wishlist\n  async addToWishlist(data: InsertWishlist): Promise<Wishlist> {\n    const [item] = await db.insert(wishlist).values(data).returning();\n    return item;\n  }\n\n  async removeFromWishlist(userId: string, gameId: string): Promise<void> {\n    await db\n      .delete(wishlist)\n      .where(sql`${wishlist.userId} = ${userId} AND ${wishlist.gameId} = ${gameId}`);\n  }\n\n  async getUserWishlist(userId: string): Promise<Wishlist[]> {\n    return await db.select().from(wishlist).where(eq(wishlist.userId, userId));\n  }\n\n  async isInWishlist(userId: string, gameId: string): Promise<boolean> {\n    const [result] = await db\n      .select()\n      .from(wishlist)\n      .where(sql`${wishlist.userId} = ${userId} AND ${wishlist.gameId} = ${gameId}`);\n    return !!result;\n  }\n\n  // Bulk operations\n  async bulkDeleteGames(gameIds: string[]): Promise<void> {\n    for (const gameId of gameIds) {\n      await this.deleteGame(gameId);\n    }\n  }\n\n  async bulkToggleGameActive(gameIds: string[], isActive: boolean): Promise<void> {\n    for (const gameId of gameIds) {\n      await db.update(games).set({ isActive }).where(eq(games.id, gameId));\n    }\n  }\n\n  // Screenshots\n  async createScreenshot(data: any): Promise<any> {\n    const { screenshots } = await import(\"@shared/schema\");\n    const [screenshot] = await db.insert(screenshots).values(data).returning();\n    return screenshot;\n  }\n\n  async getGameScreenshots(gameId: string): Promise<any[]> {\n    const { screenshots } = await import(\"@shared/schema\");\n    return await db.select().from(screenshots).where(eq(screenshots.gameId, gameId));\n  }\n\n  async deleteScreenshot(id: string, userId: string): Promise<void> {\n    const { screenshots } = await import(\"@shared/schema\");\n    await db.delete(screenshots).where(\n      and(\n        eq(screenshots.id, id),\n        eq(screenshots.userId, userId)\n      )\n    );\n  }\n\n  // Stats\n  async getStats(): Promise<{\n    totalUsers: number;\n    totalLicenses: number;\n    activeLicenses: number;\n    totalGames: number;\n    totalDownloads: number;\n  }> {\n    const [userCount] = await db.select({ count: sql<number>`count(*)` }).from(users);\n    const [licenseCount] = await db.select({ count: sql<number>`count(*)` }).from(licenses);\n    const [activeLicenseCount] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(licenses)\n      .where(eq(licenses.isActive, true));\n    const [gameCount] = await db.select({ count: sql<number>`count(*)` }).from(games);\n    const [downloadCount] = await db.select({ count: sql<number>`count(*)` }).from(downloads);\n\n    return {\n      totalUsers: Number(userCount.count),\n      totalLicenses: Number(licenseCount.count),\n      activeLicenses: Number(activeLicenseCount.count),\n      totalGames: Number(gameCount.count),\n      totalDownloads: Number(downloadCount.count),\n    };\n  }\n\n  async getDownloadStats(): Promise<Array<{ gameId: string; gameTitle: string; downloads: number }>> {\n    const result = await db\n      .select({\n        gameId: downloads.gameId,\n        count: sql<number>`count(*)`,\n      })\n      .from(downloads)\n      .groupBy(downloads.gameId);\n\n    const stats = await Promise.all(\n      result.map(async (item) => {\n        const game = await this.getGame(item.gameId);\n        return {\n          gameId: item.gameId,\n          gameTitle: game?.title || \"Unknown\",\n          downloads: Number(item.count),\n        };\n      })\n    );\n\n    return stats.sort((a, b) => b.downloads - a.downloads);\n  }\n\n  // Screenshots\n  async createScreenshot(data: any): Promise<any> {\n    const [screenshot] = await db.insert(screenshots).values(data).returning();\n    return screenshot;\n  }\n\n  async getGameScreenshots(gameId: string): Promise<any[]> {\n    return await db.select().from(screenshots).where(eq(screenshots.gameId, gameId));\n  }\n\n  async deleteScreenshot(id: string, userId: string): Promise<void> {\n    await db.delete(screenshots).where(and(eq(screenshots.id, id), eq(screenshots.userId, userId)));\n  }\n\n  // Activities\n  async createActivity(data: any): Promise<any> {\n    const [activity] = await db.insert(activities).values(data).returning();\n    return activity;\n  }\n\n  async getActivityFeed(userId: string): Promise<any[]> {\n    return await db.select().from(activities).where(eq(activities.userId, userId)).orderBy(desc(activities.createdAt));\n  }\n\n  async getUserActivity(userId: string): Promise<any[]> {\n    return await db.select().from(activities).where(eq(activities.userId, userId)).orderBy(desc(activities.createdAt));\n  }\n\n  // User Stats and Profile\n  async getUserStats(userId: string): Promise<any> {\n    const libraryCount = await db.select({ count: sql<number>`count(*)` }).from(userLibrary).where(eq(userLibrary.userId, userId));\n    const reviewCount = await db.select({ count: sql<number>`count(*)` }).from(reviews).where(eq(reviews.userId, userId));\n    const followerCount = await db.select({ count: sql<number>`count(*)` }).from(follows).where(eq(follows.followingId, userId));\n    const followingCount = await db.select({ count: sql<number>`count(*)` }).from(follows).where(eq(follows.followerId, userId));\n\n    return {\n      gamesOwned: Number(libraryCount[0].count),\n      reviewsWritten: Number(reviewCount[0].count),\n      followers: Number(followerCount[0].count),\n      following: Number(followingCount[0].count),\n    };\n  }\n\n  async updateUserProfile(userId: string, data: { avatarUrl?: string; bio?: string; location?: string }): Promise<User> {\n    return await this.updateUser(userId, data);\n  }\n\n  // Followers\n  async getFollowers(userId: string): Promise<any[]> {\n    return await db.select().from(follows).where(eq(follows.followingId, userId));\n  }\n\n  async getFollowing(userId: string): Promise<any[]> {\n    return await db.select().from(follows).where(eq(follows.followerId, userId));\n  }\n\n  async followUser(followerId: string, followingId: string): Promise<any> {\n    const [follow] = await db.insert(follows).values({ followerId, followingId }).returning();\n    return follow;\n  }\n\n  async unfollowUser(followerId: string, followingId: string): Promise<void> {\n    await db.delete(follows).where(and(eq(follows.followerId, followerId), eq(follows.followingId, followingId)));\n  }\n\n  async isFollowing(followerId: string, followingId: string): Promise<boolean> {\n    const [result] = await db.select().from(follows).where(and(eq(follows.followerId, followerId), eq(follows.followingId, followingId)));\n    return !!result;\n  }\n\n  // Achievements\n  async getGameAchievements(gameId: string): Promise<any[]> {\n    return await db.select().from(achievements).where(eq(achievements.gameId, gameId));\n  }\n\n  async getUserAchievements(userId: string): Promise<any[]> {\n    return await db.select().from(userAchievements).where(eq(userAchievements.userId, userId));\n  }\n\n  async getAchievement(id: string): Promise<any> {\n    const [achievement] = await db.select().from(achievements).where(eq(achievements.id, id));\n    return achievement;\n  }\n\n  async unlockAchievement(userId: string, achievementId: string): Promise<any> {\n    const [unlocked] = await db.insert(userAchievements).values({ userId, achievementId }).returning();\n    return unlocked;\n  }\n\n  // Playtime\n  async getUserPlaytime(userId: string): Promise<any[]> {\n    return await db.select().from(playtime).where(eq(playtime.userId, userId));\n  }\n\n  async updatePlaytime(userId: string, gameId: string, minutes: number): Promise<any> {\n    const existing = await db.select().from(playtime).where(and(eq(playtime.userId, userId), eq(playtime.gameId, gameId)));\n    \n    if (existing.length > 0) {\n      const [updated] = await db.update(playtime)\n        .set({ totalMinutes: existing[0].totalMinutes + minutes, lastPlayed: new Date(), updatedAt: new Date() })\n        .where(and(eq(playtime.userId, userId), eq(playtime.gameId, gameId)))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(playtime).values({ userId, gameId, totalMinutes: minutes, lastPlayed: new Date() }).returning();\n      return created;\n    }\n  }\n\n  // Comments\n  async getGameComments(gameId: string): Promise<any[]> {\n    return await db.select().from(comments).where(eq(comments.gameId, gameId)).orderBy(desc(comments.createdAt));\n  }\n\n  async createComment(data: any): Promise<any> {\n    const [comment] = await db.insert(comments).values(data).returning();\n    return comment;\n  }\n\n  async updateComment(id: string, userId: string, content: string): Promise<any> {\n    const [comment] = await db.update(comments)\n      .set({ content, updatedAt: new Date() })\n      .where(and(eq(comments.id, id), eq(comments.userId, userId)))\n      .returning();\n    return comment;\n  }\n\n  async deleteComment(id: string, userId: string): Promise<void> {\n    await db.delete(comments).where(and(eq(comments.id, id), eq(comments.userId, userId)));\n  }\n\n  // Trending and Popular\n  async getTrendingGames(): Promise<Game[]> {\n    return await db.select().from(games).orderBy(desc(games.createdAt)).limit(10);\n  }\n\n  async getPopularGames(): Promise<Game[]> {\n    return await db.select().from(games).orderBy(desc(games.totalRatings)).limit(10);\n  }\n\n  async getRecommendations(userId: string): Promise<Game[]> {\n    return await db.select().from(games).orderBy(desc(games.averageRating)).limit(10);\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":19053},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/pages/admin/games.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus, Pencil, Trash2, Download } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Game, InsertGame } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminGames() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingGame, setEditingGame] = useState<Game | null>(null);\n  const [isSteamImportOpen, setIsSteamImportOpen] = useState(false);\n  const [steamSearchQuery, setSteamSearchQuery] = useState(\"\");\n  const [steamSearchResults, setSteamSearchResults] = useState<any[]>([]);\n\n  const [importingAppId, setImportingAppId] = useState<string | null>(null);\n  const [downloadLinkInput, setDownloadLinkInput] = useState(\"\");\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    imageUrl: \"\",\n    downloadUrl: \"\",\n    category: \"\",\n    tags: \"\",\n    featured: false,\n  });\n\n  const { data: games, isLoading } = useQuery<Game[]>({\n    queryKey: [\"/api/games\"],\n  });\n\n  const createGameMutation = useMutation({\n    mutationFn: async (data: InsertGame) => {\n      return await apiRequest(\"POST\", \"/api/admin/games\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/games\"] });\n      toast({ title: \"Game created successfully!\" });\n      resetForm();\n      setIsDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error creating game\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const updateGameMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertGame> }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/games/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/games\"] });\n      toast({ title: \"Game updated successfully!\" });\n      resetForm();\n      setIsDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error updating game\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const deleteGameMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/admin/games/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/games\"] });\n      toast({ title: \"Game deleted successfully!\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error deleting game\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const steamImportMutation = useMutation({\n    mutationFn: async ({ appId, downloadUrl }: { appId: string; downloadUrl?: string }) => {\n      const response = await fetch(\"/api/admin/games/import-steam\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ appId, downloadUrl }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Failed to import from Steam\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/games\"] });\n      setIsSteamImportOpen(false);\n      setSteamSearchQuery(\"\");\n      setSteamSearchResults([]);\n      setImportingAppId(null);\n      setDownloadLinkInput(\"\");\n      toast({\n        title: \"Game imported successfully\",\n        description: `${data.game.title} has been imported with ${data.steamData.screenshotCount} screenshots`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error importing game\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const searchSteam = async () => {\n    if (!steamSearchQuery.trim()) return;\n\n    try {\n      const response = await fetch(`/api/steam/search?query=${encodeURIComponent(steamSearchQuery)}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Search failed\");\n      const results = await response.json();\n      setSteamSearchResults(results);\n    } catch (error: any) {\n      toast({\n        title: \"Search failed\",\n        description: error.message || \"Could not search Steam\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      downloadUrl: \"\",\n      category: \"\",\n      tags: \"\",\n      featured: false,\n    });\n    setEditingGame(null);\n  };\n\n  const handleEdit = (game: Game) => {\n    setEditingGame(game);\n    setFormData({\n      title: game.title,\n      description: game.description,\n      imageUrl: game.imageUrl,\n      downloadUrl: game.downloadUrl,\n      category: game.category,\n      tags: game.tags?.join(\", \") || \"\",\n      featured: game.featured,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const gameData = {\n      ...formData,\n      tags: formData.tags.split(\",\").map((tag) => tag.trim()).filter(Boolean),\n    };\n\n    if (editingGame) {\n      updateGameMutation.mutate({ id: editingGame.id, data: gameData });\n    } else {\n      createGameMutation.mutate(gameData as InsertGame);\n    }\n  };\n\n  const handleImportGame = (appId: string) => {\n    setImportingAppId(appId);\n  };\n\n  const confirmImport = () => {\n    if (importingAppId) {\n      steamImportMutation.mutate({ \n        appId: importingAppId, \n        downloadUrl: downloadLinkInput.trim() || undefined \n      });\n    }\n  };\n\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1\n            className=\"text-3xl font-bold mb-2\"\n            style={{ fontFamily: \"Montserrat, sans-serif\" }}\n            data-testid=\"text-admin-games-title\"\n          >\n            Manage Games\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-admin-games-subtitle\">\n            Add, edit, and remove games from your library\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Dialog open={isSteamImportOpen} onOpenChange={setIsSteamImportOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Import from Steam\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Import Game from Steam</DialogTitle>\n                <DialogDescription>\n                  Search for a game on Steam to automatically import details, screenshots, and trailers\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Search Steam games...\"\n                    value={steamSearchQuery}\n                    onChange={(e) => setSteamSearchQuery(e.target.value)}\n                    onKeyDown={(e) => e.key === 'Enter' && searchSteam()}\n                  />\n                  <Button onClick={searchSteam} disabled={steamImportMutation.isPending}>Search</Button>\n                </div>\n                {importingAppId ? (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Importing Game</h4>\n                      <p className=\"text-sm text-muted-foreground mb-4\">\n                        Game details and screenshots will be imported from Steam. \n                        Provide a download link to make the game active immediately.\n                      </p>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"downloadLink\">Download Link (Optional)</Label>\n                      <Input\n                        id=\"downloadLink\"\n                        type=\"url\"\n                        placeholder=\"https://example.com/game-download.zip\"\n                        value={downloadLinkInput}\n                        onChange={(e) => setDownloadLinkInput(e.target.value)}\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Leave empty to add the download link later by editing the game\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        onClick={confirmImport} \n                        disabled={steamImportMutation.isPending}\n                        className=\"flex-1\"\n                      >\n                        {steamImportMutation.isPending ? \"Importing...\" : \"Import Game\"}\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => {\n                          setImportingAppId(null);\n                          setDownloadLinkInput(\"\");\n                        }}\n                        disabled={steamImportMutation.isPending}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"max-h-96 overflow-y-auto space-y-2\">\n                    {steamSearchResults.map((result) => (\n                      <Card key={result.appId} className=\"p-4 cursor-pointer hover:bg-accent\" onClick={() => handleImportGame(result.appId)}>\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold\">{result.name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">App ID: {result.appId}</p>\n                          </div>\n                          <Button size=\"sm\">\n                            Select\n                          </Button>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm} data-testid=\"button-add-game\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Game\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"text-dialog-title\">\n                  {editingGame ? \"Edit Game\" : \"Add New Game\"}\n                </DialogTitle>\n                <DialogDescription data-testid=\"text-dialog-description\">\n                  {editingGame ? \"Update game information\" : \"Add a new game to the library\"}\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\" data-testid=\"label-game-title\">\n                    Title\n                  </Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    required\n                    data-testid=\"input-game-title\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\" data-testid=\"label-game-description\">\n                    Description\n                  </Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    rows={4}\n                    required\n                    data-testid=\"input-game-description\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"imageUrl\" data-testid=\"label-game-image\">\n                    Image URL (460x215 recommended)\n                  </Label>\n                  <Input\n                    id=\"imageUrl\"\n                    type=\"url\"\n                    value={formData.imageUrl}\n                    onChange={(e) => setFormData({ ...formData, imageUrl: e.target.value })}\n                    placeholder=\"https://example.com/image.jpg\"\n                    required\n                    data-testid=\"input-game-image\"\n                  />\n                  {formData.imageUrl && (\n                    <div className=\"aspect-[460/215] rounded-lg overflow-hidden border\">\n                      <img\n                        src={formData.imageUrl}\n                        alt=\"Preview\"\n                        className=\"w-full h-full object-cover\"\n                        data-testid=\"img-game-preview\"\n                      />\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"downloadUrl\" data-testid=\"label-game-download\">\n                    Download URL\n                  </Label>\n                  <Input\n                    id=\"downloadUrl\"\n                    type=\"url\"\n                    value={formData.downloadUrl}\n                    onChange={(e) => setFormData({ ...formData, downloadUrl: e.target.value })}\n                    placeholder=\"https://example.com/download\"\n                    required\n                    data-testid=\"input-game-download\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\" data-testid=\"label-game-category\">\n                    Category\n                  </Label>\n                  <Input\n                    id=\"category\"\n                    value={formData.category}\n                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}\n                    placeholder=\"Action, RPG, Strategy, etc.\"\n                    required\n                    data-testid=\"input-game-category\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"tags\" data-testid=\"label-game-tags\">\n                    Tags (comma-separated)\n                  </Label>\n                  <Input\n                    id=\"tags\"\n                    value={formData.tags}\n                    onChange={(e) => setFormData({ ...formData, tags: e.target.value })}\n                    placeholder=\"Multiplayer, Singleplayer, Co-op\"\n                    data-testid=\"input-game-tags\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"featured\"\n                    checked={formData.featured}\n                    onCheckedChange={(checked) => setFormData({ ...formData, featured: checked })}\n                    data-testid=\"switch-game-featured\"\n                  />\n                  <Label htmlFor=\"featured\" data-testid=\"label-game-featured\">\n                    Featured Game\n                  </Label>\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-save-game\">\n                    {editingGame ? \"Update Game\" : \"Create Game\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      resetForm();\n                      setIsDialogOpen(false);\n                    }}\n                    data-testid=\"button-cancel-game\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      <Card>\n        {isLoading ? (\n          <div className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\">Loading games...</p>\n          </div>\n        ) : games && games.length > 0 ? (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead data-testid=\"header-image\">Image</TableHead>\n                <TableHead data-testid=\"header-title\">Title</TableHead>\n                <TableHead data-testid=\"header-category\">Category</TableHead>\n                <TableHead data-testid=\"header-tags\">Tags</TableHead>\n                <TableHead data-testid=\"header-featured\">Featured</TableHead>\n                <TableHead data-testid=\"header-actions\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {games.map((game) => (\n                <TableRow key={game.id} data-testid={`row-game-${game.id}`}>\n                  <TableCell>\n                    <img\n                      src={game.imageUrl}\n                      alt={game.title}\n                      className=\"w-20 h-10 object-cover rounded\"\n                      data-testid={`img-table-game-${game.id}`}\n                    />\n                  </TableCell>\n                  <TableCell className=\"font-medium\" data-testid={`text-table-title-${game.id}`}>\n                    {game.title}\n                  </TableCell>\n                  <TableCell data-testid={`text-table-category-${game.id}`}>\n                    {game.category}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-1 flex-wrap\">\n                      {game.tags?.slice(0, 2).map((tag) => (\n                        <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {game.featured && (\n                      <Badge className=\"bg-accent text-accent-foreground\">Featured</Badge>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleEdit(game)}\n                        data-testid={`button-edit-${game.id}`}\n                      >\n                        <Pencil className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => {\n                          if (confirm(\"Are you sure you want to delete this game?\")) {\n                            deleteGameMutation.mutate(game.id);\n                          }\n                        }}\n                        data-testid={`button-delete-${game.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        ) : (\n          <div className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-games-admin\">\n              No games yet. Add your first game to get started!\n            </p>\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}","size_bytes":20365},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/protected-route.tsx":{"content":"\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport default function ProtectedRoute({ children, requireAdmin }: { children: React.ReactNode; requireAdmin?: boolean }) {\n  const [, setLocation] = useLocation();\n  const { data: session, isLoading } = useQuery<{ user: User | null }>({\n    queryKey: [\"/api/session\"],\n  });\n\n  useEffect(() => {\n    if (!isLoading && !session?.user) {\n      setLocation(\"/auth/register\");\n    } else if (!isLoading && requireAdmin && !session?.user?.isAdmin) {\n      setLocation(\"/\");\n    }\n  }, [session, isLoading, setLocation, requireAdmin]);\n\n  if (isLoading) {\n    return null;\n  }\n\n  if (!session?.user) {\n    return null;\n  }\n\n  // Redirect non-admin users trying to access admin routes\n  if (requireAdmin && !session.user.isAdmin) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":945},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/game-detail.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Download, ArrowLeft, Calendar, Plus, Check, Play } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Game } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport default function GameDetail() {\n  const [, params] = useRoute(\"/game/:id\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: game, isLoading } = useQuery<Game>({\n    queryKey: [\"/api/games\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  const { data: session } = useQuery<{ user: any }>({\n    queryKey: [\"/api/session\"],\n  });\n\n  const { data: libraryCheck } = useQuery<{ inLibrary: boolean }>({\n    queryKey: [\"/api/library/check\", params?.id],\n    enabled: !!params?.id && !!session?.user,\n  });\n\n  const { data: libraryEntry } = useQuery({\n    queryKey: [\"/api/library/entry\", params?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/library/check/${params?.id}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) return null;\n      const data = await response.json();\n      return data.inLibrary ? { gameId: params?.id } : null;\n    },\n    enabled: !!params?.id && !!session?.user,\n  });\n\n  const { data: screenshots } = useQuery({\n    queryKey: [\"/api/games\", params?.id, \"screenshots\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/games/${params?.id}/screenshots`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!params?.id,\n  });\n\n  const addToLibraryMutation = useMutation({\n    mutationFn: async (gameId: string) => {\n      return await apiRequest(\"POST\", \"/api/library\", { gameId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/library/check\", params?.id] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/library\"] });\n      toast({\n        title: \"Added to library!\",\n        description: \"Game has been added to your library\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to add to library\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadMutation = useMutation({\n    mutationFn: async (gameId: string) => {\n      return await apiRequest(\"POST\", \"/api/downloads\", { gameId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/downloads\"] });\n      toast({\n        title: \"Download started!\",\n        description: \"Your game is being prepared for download\",\n      });\n      if (game?.downloadUrl) {\n        window.open(game.downloadUrl, \"_blank\");\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateLibraryMutation = useMutation({\n    mutationFn: async ({ gameId, hasLocalFiles, exePath }: { gameId: string; hasLocalFiles?: boolean; exePath?: string }) => {\n      const response = await apiRequest(\"PATCH\", `/api/library/${gameId}`, { hasLocalFiles, exePath });\n      return await response.json();\n    },\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({ queryKey: [\"/api/library/entry\", params?.id] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/library\"] });\n      toast({\n        title: \"Library updated!\",\n        description: \"Your settings have been saved\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"max-w-7xl mx-auto px-6 py-12\">\n          <Card className=\"animate-pulse\">\n            <div className=\"aspect-[21/9] bg-muted\" />\n            <div className=\"p-8 space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\" />\n              <div className=\"h-4 bg-muted rounded w-full\" />\n              <div className=\"h-4 bg-muted rounded w-2/3\" />\n            </div>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (!game) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"p-12 text-center\">\n          <p className=\"text-muted-foreground text-lg\" data-testid=\"text-game-not-found\">\n            Game not found\n          </p>\n          <Button onClick={() => setLocation(\"/library\")} className=\"mt-4\" data-testid=\"button-back-to-library\">\n            Back to Library\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setLocation(\"/library\")}\n          className=\"mb-6\"\n          data-testid=\"button-back\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back to Library\n        </Button>\n\n        <Card className=\"overflow-hidden\">\n          {/* Hero Image */}\n          <div className=\"relative aspect-[21/9] overflow-hidden bg-muted\">\n            <img\n              src={game.imageUrl}\n              alt={game.title}\n              className=\"w-full h-full object-cover\"\n              data-testid=\"img-game-hero\"\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-card via-card/40 to-transparent\" />\n          </div>\n\n          {/* Content */}\n          <div className=\"p-8 -mt-24 relative z-10\">\n            <div className=\"flex flex-col lg:flex-row gap-8\">\n              {/* Main Content */}\n              <div className=\"flex-1 space-y-6\">\n                <div>\n                  <h1\n                    className=\"text-4xl font-bold mb-3\"\n                    style={{ fontFamily: \"Montserrat, sans-serif\" }}\n                    data-testid=\"text-game-detail-title\"\n                  >\n                    {game.title}\n                  </h1>\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <Badge variant=\"secondary\" data-testid=\"badge-game-category\">\n                      {game.category}\n                    </Badge>\n                    {game.featured && (\n                      <Badge className=\"bg-accent text-accent-foreground\" data-testid=\"badge-featured\">\n                        Featured\n                      </Badge>\n                    )}\n                  </div>\n                  {game.tags && game.tags.length > 0 && (\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {game.tags.map((tag) => (\n                        <Badge key={tag} variant=\"outline\" data-testid={`badge-detail-tag-${tag}`}>\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div>\n                  <h2 className=\"text-xl font-semibold mb-3\" data-testid=\"text-about-title\">\n                    About This Game\n                  </h2>\n                  <div \n                    className=\"text-muted-foreground leading-relaxed whitespace-pre-line\" \n                    data-testid=\"text-game-description\"\n                    dangerouslySetInnerHTML={{ __html: game.description }}\n                  />\n                </div>\n\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Calendar className=\"w-4 h-4\" />\n                  <span data-testid=\"text-release-date\">\n                    Added {new Date(game.createdAt).toLocaleDateString()}\n                  </span>\n                </div>\n              </div>\n\n              {/* Sidebar */}\n              <div className=\"lg:w-80\">\n                <Card className=\"p-6 sticky top-6\">\n                  <div className=\"space-y-4\">\n                    {session?.user ? (\n                      <>\n                        {libraryCheck?.inLibrary ? (\n                          <Button\n                            size=\"lg\"\n                            className=\"w-full\"\n                            variant=\"outline\"\n                            disabled\n                            data-testid=\"button-in-library\"\n                          >\n                            <Check className=\"w-5 h-5 mr-2\" />\n                            In Library\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"lg\"\n                            className=\"w-full\"\n                            variant=\"outline\"\n                            onClick={() => addToLibraryMutation.mutate(game.id)}\n                            disabled={addToLibraryMutation.isPending}\n                            data-testid=\"button-add-to-library\"\n                          >\n                            <Plus className=\"w-5 h-5 mr-2\" />\n                            {addToLibraryMutation.isPending ? \"Adding...\" : \"Add to Library\"}\n                          </Button>\n                        )}\n                        <Button\n                          size=\"lg\"\n                          className=\"w-full\"\n                          onClick={() => downloadMutation.mutate(game.id)}\n                          disabled={downloadMutation.isPending}\n                          data-testid=\"button-download-game\"\n                        >\n                          <Download className=\"w-5 h-5 mr-2\" />\n                          {downloadMutation.isPending ? \"Preparing...\" : \"Download Now\"}\n                        </Button>\n                      </>\n                    ) : (\n                      <Button\n                        size=\"lg\"\n                        className=\"w-full\"\n                        onClick={() => setLocation(\"/auth/login\")}\n                        data-testid=\"button-login-to-download\"\n                      >\n                        Sign in to Download\n                      </Button>\n                    )}\n\n                    <div className=\"pt-4 border-t space-y-3\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-1\">Category</p>\n                        <p className=\"font-medium\" data-testid=\"text-sidebar-category\">\n                          {game.category}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-1\">Tags</p>\n                        <div className=\"flex gap-2 flex-wrap\">\n                          {game.tags?.map((tag) => (\n                            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                              {tag}\n                            </Badge>\n                          )) || <p className=\"text-sm text-muted-foreground\">No tags</p>}\n                        </div>\n                      </div>\n\n                      {libraryCheck?.inLibrary && (\n                        <div className=\"pt-4 border-t space-y-3\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id=\"hasLocalFiles\"\n                              checked={libraryEntry?.hasLocalFiles || false}\n                              onCheckedChange={(checked) => {\n                                updateLibraryMutation.mutate({\n                                  gameId: game.id,\n                                  hasLocalFiles: checked as boolean,\n                                });\n                              }}\n                              data-testid=\"checkbox-has-local-files\"\n                            />\n                            <Label htmlFor=\"hasLocalFiles\" className=\"text-sm cursor-pointer\">\n                              I have the game files\n                            </Label>\n                          </div>\n\n                          {libraryEntry?.hasLocalFiles && (\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"exePath\" className=\"text-sm\">\n                                Game .exe path\n                              </Label>\n                              <div className=\"flex gap-2\">\n                                <Input\n                                  id=\"exePath\"\n                                  type=\"text\"\n                                  placeholder=\"C:\\Games\\game.exe\"\n                                  value={libraryEntry?.exePath || \"\"}\n                                  readOnly\n                                  data-testid=\"input-exe-path\"\n                                />\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => {\n                                    const input = document.createElement('input');\n                                    input.type = 'file';\n                                    input.accept = '.exe';\n                                    input.onchange = (e) => {\n                                      const file = (e.target as HTMLInputElement).files?.[0];\n                                      if (file) {\n                                        const path = (file as any).path || file.name;\n                                        updateLibraryMutation.mutate({\n                                          gameId: game.id,\n                                          exePath: path,\n                                        });\n                                      }\n                                    };\n                                    input.click();\n                                  }}\n                                  data-testid=\"button-browse-exe\"\n                                >\n                                  Browse\n                                </Button>\n                              </div>\n                              {libraryEntry?.exePath && (\n                                <Button\n                                  size=\"sm\"\n                                  className=\"w-full mt-2\"\n                                  onClick={() => {\n                                    navigator.clipboard.writeText(libraryEntry.exePath);\n                                    toast({\n                                      title: \"Path copied!\",\n                                      description: \"Game path copied to clipboard\",\n                                    });\n                                  }}\n                                  data-testid=\"button-copy-path\"\n                                >\n                                  Copy Path\n                                </Button>\n                              )}\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <Separator />\n\n        {/* Screenshots Gallery */}\n        {screenshots && screenshots.length > 0 && (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-2xl font-bold\">Screenshots</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n              {screenshots.map((screenshot: any) => (\n                <div key={screenshot.id} className=\"aspect-video overflow-hidden rounded-lg\">\n                  <img\n                    src={screenshot.imageUrl}\n                    alt={screenshot.caption || \"Game screenshot\"}\n                    className=\"w-full h-full object-cover hover:scale-105 transition-transform cursor-pointer\"\n                    onClick={() => window.open(screenshot.imageUrl, '_blank')}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <Separator />\n\n        {/* Reviews Section */}\n        <div className=\"space-y-6\">\n          <h3 className=\"text-2xl font-bold\">Reviews</h3>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16663},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"server/seed-licenses.ts":{"content":"import { db } from \"./db\";\nimport { licenses } from \"@shared/schema\";\n\nconst sampleLicenses = [\n  { key: \"BETA-2024-ALPHA-001\", isActive: true },\n  { key: \"BETA-2024-ALPHA-002\", isActive: true },\n  { key: \"BETA-2024-ALPHA-003\", isActive: true },\n  { key: \"BETA-2024-GAMMA-004\", isActive: true },\n  { key: \"BETA-2024-DELTA-005\", isActive: true },\n];\n\nasync function seedLicenses() {\n  console.log(\"🔑 Seeding licenses...\");\n\n  try {\n    const existingLicenses = await db.select().from(licenses);\n    \n    if (existingLicenses.length > 0) {\n      console.log(\"✅ Database already has\", existingLicenses.length, \"licenses\");\n      return;\n    }\n\n    await db.insert(licenses).values(sampleLicenses);\n    \n    console.log(\"✅ Successfully seeded database with\", sampleLicenses.length, \"license keys\");\n    console.log(\"Available keys:\");\n    sampleLicenses.forEach(l => console.log(\"  -\", l.key));\n  } catch (error) {\n    console.error(\"❌ Error seeding licenses:\", error);\n  }\n}\n\nseedLicenses();\n","size_bytes":998},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation, Link } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Gamepad2, Download, Star, TrendingUp, Play } from \"lucide-react\";\nimport type { Game, User } from \"@shared/schema\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n\n  const { data: session, isLoading } = useQuery<{ user: User | null }>({\n    queryKey: [\"/api/session\"],\n  });\n\n  const { data: games } = useQuery<Game[]>({\n    queryKey: [\"/api/games\"],\n    enabled: !!session?.user,\n  });\n\n  // Redirect to registration if not logged in\n  useEffect(() => {\n    if (!isLoading && session && !session.user) {\n      setLocation(\"/register\");\n    }\n  }, [session, isLoading, setLocation]);\n\n  const featuredGames = games?.filter((game) => game.featured && game.isActive).slice(0, 1) || [];\n  const recentGames = games?.filter((game) => game.isActive).slice(0, 8) || [];\n\n  // Show loading or redirect - don't render content if not authenticated\n  if (isLoading || !session?.user) {\n    return null;\n  }\n\n  const heroBackgroundImage = featuredGames[0]?.imageUrl || \"https://images.unsplash.com/photo-1542751371-adc38448a05e?w=1920&h=1080&fit=crop\";\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"relative h-[70vh] overflow-hidden\">\n        <div\n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{\n            backgroundImage: `url(${heroBackgroundImage})`,\n          }}\n        >\n          <div className=\"absolute inset-0 bg-gradient-to-t from-background via-background/80 to-background/40\" />\n        </div>\n\n        <div className=\"relative h-full max-w-7xl mx-auto px-6 flex items-center\">\n          <div className=\"max-w-2xl space-y-6\">\n            <Badge\n              className=\"text-xs font-semibold tracking-wider uppercase\"\n              data-testid=\"badge-beta\"\n            >\n              <Star className=\"w-3 h-3 mr-1\" />\n              Premium Access\n            </Badge>\n            <h1\n              className=\"text-6xl font-bold tracking-tight\"\n              style={{ fontFamily: \"Montserrat, sans-serif\" }}\n              data-testid=\"text-hero-title\"\n            >\n              {featuredGames[0]?.title || \"The Future of Gaming\"}\n            </h1>\n            <div \n              className=\"text-lg text-muted-foreground max-w-xl\" \n              data-testid=\"text-hero-description\"\n              dangerouslySetInnerHTML={{ \n                __html: featuredGames[0]?.description || \n                  \"Experience premium access to the most anticipated games. Join Phoenix Games today.\" \n              }}\n            />\n            <div className=\"flex gap-4 pt-4\">\n              {session?.user ? (\n                <Link href=\"/library\">\n                  <Button\n                    size=\"lg\"\n                    className=\"px-8 text-base font-semibold backdrop-blur-sm\"\n                    data-testid=\"button-browse-library\"\n                  >\n                    <Play className=\"w-5 h-5 mr-2\" />\n                    Browse Library\n                  </Button>\n                </Link>\n              ) : (\n                <>\n                  <Link href=\"/auth/login\">\n                    <Button\n                      size=\"lg\"\n                      className=\"px-8 text-base font-semibold backdrop-blur-sm\"\n                      data-testid=\"button-get-started\"\n                    >\n                      Get Started\n                    </Button>\n                  </Link>\n                  <Link href=\"/auth/register\">\n                    <Button\n                      size=\"lg\"\n                      variant=\"outline\"\n                      className=\"px-8 text-base font-semibold backdrop-blur-md bg-background/20\"\n                      data-testid=\"button-join-beta\"\n                    >\n                      Join Now\n                    </Button>\n                  </Link>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Recently Added Games */}\n      <section className=\"max-w-7xl mx-auto px-6 py-16\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h2\n              className=\"text-3xl font-bold mb-2\"\n              style={{ fontFamily: \"Montserrat, sans-serif\" }}\n              data-testid=\"text-section-title-recent\"\n            >\n              Recently Added\n            </h2>\n            <p className=\"text-muted-foreground\" data-testid=\"text-section-subtitle-recent\">\n              Discover the latest additions to our growing library\n            </p>\n          </div>\n          <Link href=\"/library\">\n            <Button variant=\"ghost\" data-testid=\"button-view-all\">\n              View All\n              <TrendingUp className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </Link>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card\n                key={i}\n                className=\"overflow-hidden animate-pulse\"\n                data-testid={`skeleton-game-${i}`}\n              >\n                <div className=\"aspect-[460/215] bg-muted\" />\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"h-5 bg-muted rounded\" />\n                  <div className=\"h-4 bg-muted rounded w-2/3\" />\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {recentGames.map((game) => (\n              <Link key={game.id} href={`/game/${game.id}`}>\n                <Card\n                  className=\"group overflow-hidden hover-elevate transition-all duration-300 cursor-pointer\"\n                  data-testid={`card-game-${game.id}`}\n                >\n                  <div className=\"relative aspect-[460/215] overflow-hidden bg-muted\">\n                    <img\n                      src={game.imageUrl}\n                      alt={game.title}\n                      className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                      data-testid={`img-game-${game.id}`}\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                    <div className=\"absolute bottom-4 left-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                      <Button\n                        size=\"sm\"\n                        className=\"w-full\"\n                        data-testid={`button-download-${game.id}`}\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"p-4\">\n                    <h3\n                      className=\"font-bold text-lg mb-1 line-clamp-1\"\n                      data-testid={`text-game-title-${game.id}`}\n                    >\n                      {game.title}\n                    </h3>\n                    <p\n                      className=\"text-sm text-muted-foreground line-clamp-2\"\n                      data-testid={`text-game-category-${game.id}`}\n                    >\n                      {game.category}\n                    </p>\n                    {game.tags && game.tags.length > 0 && (\n                      <div className=\"flex gap-2 mt-3 flex-wrap\">\n                        {game.tags.slice(0, 2).map((tag) => (\n                          <Badge\n                            key={tag}\n                            variant=\"secondary\"\n                            className=\"text-xs\"\n                            data-testid={`badge-tag-${tag}`}\n                          >\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        )}\n      </section>\n    </div>\n  );\n}","size_bytes":8467},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcryptjs\";\nimport { randomBytes } from \"crypto\";\nimport { getSteamGameDetails, searchSteamGames } from \"./steam-api\";\n\ndeclare module \"express-session\" {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const ADMIN_PASSWORD = \"Coolgang57\";\n\n  // Session endpoint\n  app.get(\"/api/session\", async (req, res) => {\n    if (req.session.userId) {\n      const user = await storage.getUser(req.session.userId);\n      if (user) {\n        const { password, ...userWithoutPassword } = user;\n        return res.json({ user: userWithoutPassword });\n      }\n    }\n    res.json({ user: null });\n  });\n\n  // Authentication Routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, password, licenseKey } = req.body;\n\n      if (!username || !password || !licenseKey) {\n        return res.status(400).json({ message: \"All fields are required\" });\n      }\n\n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Validate license key\n      const license = await storage.getLicense(licenseKey);\n      if (!license) {\n        return res.status(400).json({ message: \"Invalid license key\" });\n      }\n      if (!license.isActive) {\n        return res.status(400).json({ message: \"License key is inactive\" });\n      }\n      if (license.usedBy) {\n        return res.status(400).json({ message: \"License key already used\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user (requires admin approval)\n      const user = await storage.createUser({\n        username,\n        password: hashedPassword,\n        isAdmin: false,\n        isApproved: false,\n        licenseKey,\n      });\n\n      // Update license\n      await storage.updateLicense(license.id, {\n        usedBy: user.id,\n        usedAt: new Date(),\n      });\n\n      // Set session\n      req.session.userId = user.id;\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password are required\" });\n      }\n\n      // Check for admin login\n      if (username === \"admin\" && password === ADMIN_PASSWORD) {\n        // Check if admin user exists\n        let adminUser = await storage.getUserByUsername(\"admin\");\n\n        // Create admin user if doesn't exist\n        if (!adminUser) {\n          const hashedPassword = await bcrypt.hash(ADMIN_PASSWORD, 10);\n          adminUser = await storage.createUser({\n            username: \"admin\",\n            password: hashedPassword,\n            isAdmin: true,\n            isApproved: true,\n            licenseKey: null,\n          });\n        }\n\n        req.session.userId = adminUser.id;\n        const { password: _, ...userWithoutPassword } = adminUser;\n        return res.json({ user: userWithoutPassword, isAdmin: true });\n      }\n\n      // Regular user login\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check if account is approved\n      if (!user.isApproved) {\n        return res.status(403).json({ message: \"Account pending admin approval\" });\n      }\n\n      req.session.userId = user.id;\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, isAdmin: user.isAdmin });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n\n  // Games Routes (Public)\n  app.get(\"/api/games\", async (req, res) => {\n    try {\n      const games = await storage.getAllGames();\n      res.json(games);\n    } catch (error) {\n      console.error(\"Error fetching games:\", error);\n      res.status(500).json({ message: \"Failed to fetch games\" });\n    }\n  });\n\n  app.get(\"/api/games/:id\", async (req, res) => {\n    try {\n      const game = await storage.getGame(req.params.id);\n      if (!game) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n      res.json(game);\n    } catch (error) {\n      console.error(\"Error fetching game:\", error);\n      res.status(500).json({ message: \"Failed to fetch game\" });\n    }\n  });\n\n  // Downloads\n  app.post(\"/api/downloads\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { gameId } = req.body;\n      if (!gameId) {\n        return res.status(400).json({ message: \"Game ID is required\" });\n      }\n\n      const game = await storage.getGame(gameId);\n      if (!game) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n\n      const download = await storage.createDownload({\n        userId: req.session.userId,\n        gameId,\n      });\n\n      res.json(download);\n    } catch (error) {\n      console.error(\"Error creating download:\", error);\n      res.status(500).json({ message: \"Failed to record download\" });\n    }\n  });\n\n  // User Library Routes\n  app.get(\"/api/library\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const libraryEntries = await storage.getUserLibrary(req.session.userId);\n      const gamesWithDetails = await Promise.all(\n        libraryEntries.map(async (entry) => {\n          const game = await storage.getGame(entry.gameId);\n          return { ...entry, game };\n        })\n      );\n\n      res.json(gamesWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching library:\", error);\n      res.status(500).json({ message: \"Failed to fetch library\" });\n    }\n  });\n\n  app.post(\"/api/library\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { gameId } = req.body;\n      if (!gameId) {\n        return res.status(400).json({ message: \"Game ID is required\" });\n      }\n\n      const game = await storage.getGame(gameId);\n      if (!game) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n\n      const inLibrary = await storage.isInLibrary(req.session.userId, gameId);\n      if (inLibrary) {\n        return res.status(400).json({ message: \"Game already in library\" });\n      }\n\n      const libraryEntry = await storage.addToLibrary({\n        userId: req.session.userId,\n        gameId,\n      });\n\n      res.json(libraryEntry);\n    } catch (error) {\n      console.error(\"Error adding to library:\", error);\n      res.status(500).json({ message: \"Failed to add to library\" });\n    }\n  });\n\n  app.delete(\"/api/library/:gameId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      await storage.removeFromLibrary(req.session.userId, req.params.gameId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing from library:\", error);\n      res.status(500).json({ message: \"Failed to remove from library\" });\n    }\n  });\n\n  app.patch(\"/api/library/:gameId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { hasLocalFiles, exePath } = req.body;\n      const libraryEntry = await storage.updateLibraryEntry(req.session.userId, req.params.gameId, {\n        hasLocalFiles,\n        exePath,\n      });\n\n      res.json(libraryEntry);\n    } catch (error) {\n      console.error(\"Error updating library entry:\", error);\n      res.status(500).json({ message: \"Failed to update library entry\" });\n    }\n  });\n\n  app.get(\"/api/library/check/:gameId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const inLibrary = await storage.isInLibrary(req.session.userId, req.params.gameId);\n      res.json({ inLibrary });\n    } catch (error) {\n      console.error(\"Error checking library:\", error);\n      res.status(500).json({ message: \"Failed to check library\" });\n    }\n  });\n\n  // Admin middleware\n  const requireAdmin = async (req: any, res: any, next: any) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n\n    const user = await storage.getUser(req.session.userId);\n    if (!user || !user.isAdmin) {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n\n    next();\n  };\n\n  // Admin Routes - Games\n  app.post(\"/api/admin/games\", requireAdmin, async (req, res) => {\n    try {\n      const game = await storage.createGame(req.body);\n      res.json(game);\n    } catch (error) {\n      console.error(\"Error creating game:\", error);\n      res.status(500).json({ message: \"Failed to create game\" });\n    }\n  });\n\n  app.patch(\"/api/admin/games/:id\", requireAdmin, async (req, res) => {\n    try {\n      const game = await storage.updateGame(req.params.id, req.body);\n      res.json(game);\n    } catch (error) {\n      console.error(\"Error updating game:\", error);\n      res.status(500).json({ message: \"Failed to update game\" });\n    }\n  });\n\n  app.delete(\"/api/admin/games/:id\", requireAdmin, async (req, res) => {\n    try {\n      await storage.deleteGame(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting game:\", error);\n      res.status(500).json({ message: \"Failed to delete game\" });\n    }\n  });\n\n  // Admin Routes - Licenses\n  app.get(\"/api/admin/licenses\", requireAdmin, async (req, res) => {\n    try {\n      const licenses = await storage.getAllLicenses();\n      res.json(licenses);\n    } catch (error) {\n      console.error(\"Error fetching licenses:\", error);\n      res.status(500).json({ message: \"Failed to fetch licenses\" });\n    }\n  });\n\n  app.post(\"/api/admin/licenses\", requireAdmin, async (req, res) => {\n    try {\n      const key = req.body.key || randomBytes(16).toString(\"hex\").toUpperCase();\n      const license = await storage.createLicense({\n        key,\n        isActive: true,\n      });\n      res.json(license);\n    } catch (error) {\n      console.error(\"Error creating license:\", error);\n      res.status(500).json({ message: \"Failed to create license\" });\n    }\n  });\n\n  app.patch(\"/api/admin/licenses/:id\", requireAdmin, async (req, res) => {\n    try {\n      const license = await storage.updateLicense(req.params.id, req.body);\n      res.json(license);\n    } catch (error) {\n      console.error(\"Error updating license:\", error);\n      res.status(500).json({ message: \"Failed to update license\" });\n    }\n  });\n\n  // Admin Routes - Users\n  app.get(\"/api/admin/users\", requireAdmin, async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", requireAdmin, async (req, res) => {\n    try {\n      const user = await storage.updateUser(req.params.id, req.body);\n      const { password, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Admin Routes - Stats\n  app.get(\"/api/admin/stats\", requireAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/download-stats\", requireAdmin, async (req, res) => {\n    try {\n      const stats = await storage.getDownloadStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching download stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch download stats\" });\n    }\n  });\n\n  // Admin Routes - Bulk Operations\n  app.post(\"/api/admin/games/bulk-delete\", requireAdmin, async (req, res) => {\n    try {\n      const { gameIds } = req.body;\n      if (!Array.isArray(gameIds)) {\n        return res.status(400).json({ message: \"gameIds must be an array\" });\n      }\n      await storage.bulkDeleteGames(gameIds);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error bulk deleting games:\", error);\n      res.status(500).json({ message: \"Failed to bulk delete games\" });\n    }\n  });\n\n  app.post(\"/api/admin/games/bulk-toggle\", requireAdmin, async (req, res) => {\n    try {\n      const { gameIds, isActive } = req.body;\n      if (!Array.isArray(gameIds) || typeof isActive !== \"boolean\") {\n        return res.status(400).json({ message: \"Invalid request body\" });\n      }\n      await storage.bulkToggleGameActive(gameIds, isActive);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error bulk toggling games:\", error);\n      res.status(500).json({ message: \"Failed to bulk toggle games\" });\n    }\n  });\n\n  // Reviews Routes\n  app.get(\"/api/games/:gameId/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getGameReviews(req.params.gameId);\n\n      const reviewsWithUsers = await Promise.all(\n        reviews.map(async (review) => {\n          const user = await storage.getUser(review.userId);\n          return {\n            ...review,\n            username: user?.username || \"Unknown\",\n          };\n        })\n      );\n\n      res.json(reviewsWithUsers);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(\"/api/reviews\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { gameId, rating, comment } = req.body;\n      if (!gameId || !rating) {\n        return res.status(400).json({ message: \"Game ID and rating are required\" });\n      }\n\n      if (rating < 1 || rating > 5) {\n        return res.status(400).json({ message: \"Rating must be between 1 and 5\" });\n      }\n\n      const existingReview = await storage.getUserReview(req.session.userId, gameId);\n      if (existingReview) {\n        const updatedReview = await storage.updateReview(existingReview.id, { rating, comment });\n        return res.json(updatedReview);\n      }\n\n      const review = await storage.createReview({\n        userId: req.session.userId,\n        gameId,\n        rating,\n        comment: comment || null,\n      });\n\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  app.delete(\"/api/reviews/:id\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      await storage.deleteReview(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting review:\", error);\n      res.status(500).json({ message: \"Failed to delete review\" });\n    }\n  });\n\n  app.get(\"/api/reviews/check/:gameId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const review = await storage.getUserReview(req.session.userId, req.params.gameId);\n      res.json({ review: review || null });\n    } catch (error) {\n      console.error(\"Error checking review:\", error);\n      res.status(500).json({ message: \"Failed to check review\" });\n    }\n  });\n\n  // Wishlist Routes\n  app.get(\"/api/wishlist\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const wishlistEntries = await storage.getUserWishlist(req.session.userId);\n      const gamesWithDetails = await Promise.all(\n        wishlistEntries.map(async (entry) => {\n          const game = await storage.getGame(entry.gameId);\n          return { ...entry, game };\n        })\n      );\n\n      res.json(gamesWithDetails);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { gameId } = req.body;\n      if (!gameId) {\n        return res.status(400).json({ message: \"Game ID is required\" });\n      }\n\n      const game = await storage.getGame(gameId);\n      if (!game) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n\n      const inWishlist = await storage.isInWishlist(req.session.userId, gameId);\n      if (inWishlist) {\n        return res.status(400).json({ message: \"Game already in wishlist\" });\n      }\n\n      const wishlistEntry = await storage.addToWishlist({\n        userId: req.session.userId,\n        gameId,\n      });\n\n      res.json(wishlistEntry);\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:gameId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      await storage.removeFromWishlist(req.session.userId, req.params.gameId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  app.get(\"/api/wishlist/check/:gameId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const inWishlist = await storage.isInWishlist(req.session.userId, req.params.gameId);\n      res.json({ inWishlist });\n    } catch (error) {\n      console.error(\"Error checking wishlist:\", error);\n      res.status(500).json({ message: \"Failed to check wishlist\" });\n    }\n  });\n\n  // Download history\n  app.get(\"/api/downloads/history\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const downloads = await storage.getDownloadsByUser(req.session.userId);\n      const downloadsWithGames = await Promise.all(\n        downloads.map(async (download) => {\n          const game = await storage.getGame(download.gameId);\n          return { ...download, game };\n        })\n      );\n\n      res.json(downloadsWithGames);\n    } catch (error) {\n      console.error(\"Error fetching download history:\", error);\n      res.status(500).json({ message: \"Failed to fetch download history\" });\n    }\n  });\n\n  // Friends/Follow System\n  app.get(\"/api/users/:userId/followers\", async (req, res) => {\n    try {\n      const followers = await storage.getFollowers(req.params.userId);\n      res.json(followers);\n    } catch (error) {\n      console.error(\"Error fetching followers:\", error);\n      res.status(500).json({ message: \"Failed to fetch followers\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/following\", async (req, res) => {\n    try {\n      const following = await storage.getFollowing(req.params.userId);\n      res.json(following);\n    } catch (error) {\n      console.error(\"Error fetching following:\", error);\n      res.status(500).json({ message: \"Failed to fetch following\" });\n    }\n  });\n\n  app.post(\"/api/users/:userId/follow\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      if (req.session.userId === req.params.userId) {\n        return res.status(400).json({ message: \"Cannot follow yourself\" });\n      }\n\n      const follow = await storage.followUser(req.session.userId, req.params.userId);\n\n      // Create activity\n      await storage.createActivity({\n        userId: req.session.userId,\n        type: \"follow\",\n        targetUserId: req.params.userId,\n        gameId: null,\n        metadata: null,\n      });\n\n      res.json(follow);\n    } catch (error) {\n      console.error(\"Error following user:\", error);\n      res.status(500).json({ message: \"Failed to follow user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:userId/follow\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      await storage.unfollowUser(req.session.userId, req.params.userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error unfollowing user:\", error);\n      res.status(500).json({ message: \"Failed to unfollow user\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/follow-status\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.json({ isFollowing: false });\n      }\n\n      const isFollowing = await storage.isFollowing(req.session.userId, req.params.userId);\n      res.json({ isFollowing });\n    } catch (error) {\n      console.error(\"Error checking follow status:\", error);\n      res.status(500).json({ message: \"Failed to check follow status\" });\n    }\n  });\n\n  // User Profiles\n  app.get(\"/api/users/:userId/profile\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password, ...userWithoutPassword } = user;\n      const stats = await storage.getUserStats(req.params.userId);\n\n      res.json({ user: userWithoutPassword, stats });\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch user profile\" });\n    }\n  });\n\n  app.put(\"/api/profile\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { avatarUrl, bio, location } = req.body;\n      const updatedUser = await storage.updateUserProfile(req.session.userId, {\n        avatarUrl,\n        bio,\n        location,\n      });\n\n      const { password, ...userWithoutPassword } = updatedUser;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Achievements\n  app.get(\"/api/games/:gameId/achievements\", async (req, res) => {\n    try {\n      const achievements = await storage.getGameAchievements(req.params.gameId);\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/achievements\", async (req, res) => {\n    try {\n      const achievements = await storage.getUserAchievements(req.params.userId);\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  app.post(\"/api/achievements/:achievementId/unlock\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const unlocked = await storage.unlockAchievement(req.session.userId, req.params.achievementId);\n\n      // Create activity\n      const achievement = await storage.getAchievement(req.params.achievementId);\n      await storage.createActivity({\n        userId: req.session.userId,\n        type: \"achievement\",\n        gameId: achievement.gameId,\n        targetUserId: null,\n        metadata: JSON.stringify({ achievementId: req.params.achievementId }),\n      });\n\n      res.json(unlocked);\n    } catch (error) {\n      console.error(\"Error unlocking achievement:\", error);\n      res.status(500).json({ message: \"Failed to unlock achievement\" });\n    }\n  });\n\n  // Playtime Tracking\n  app.get(\"/api/users/:userId/playtime\", async (req, res) => {\n    try {\n      const playtime = await storage.getUserPlaytime(req.params.userId);\n      res.json(playtime);\n    } catch (error) {\n      console.error(\"Error fetching playtime:\", error);\n      res.status(500).json({ message: \"Failed to fetch playtime\" });\n    }\n  });\n\n  app.post(\"/api/playtime/:gameId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { minutes } = req.body;\n      const playtime = await storage.updatePlaytime(req.session.userId, req.params.gameId, minutes);\n      res.json(playtime);\n    } catch (error) {\n      console.error(\"Error updating playtime:\", error);\n      res.status(500).json({ message: \"Failed to update playtime\" });\n    }\n  });\n\n  // Comments\n  app.get(\"/api/games/:gameId/comments\", async (req, res) => {\n    try {\n      const comments = await storage.getGameComments(req.params.gameId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching comments:\", error);\n      res.status(500).json({ message: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/games/:gameId/comments\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { content, parentId } = req.body;\n      const comment = await storage.createComment({\n        userId: req.session.userId,\n        gameId: req.params.gameId,\n        content,\n        parentId: parentId || null,\n      });\n\n      // Create activity\n      await storage.createActivity({\n        userId: req.session.userId,\n        type: \"comment\",\n        gameId: req.params.gameId,\n        targetUserId: null,\n        metadata: null,\n      });\n\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ message: \"Failed to create comment\" });\n    }\n  });\n\n  app.put(\"/api/comments/:commentId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { content } = req.body;\n      const comment = await storage.updateComment(req.params.commentId, req.session.userId, content);\n      res.json(comment);\n    } catch (error) {\n      console.error(\"Error updating comment:\", error);\n      res.status(500).json({ message: \"Failed to update comment\" });\n    }\n  });\n\n  app.delete(\"/api/comments/:commentId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      await storage.deleteComment(req.params.commentId, req.session.userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n      res.status(500).json({ message: \"Failed to delete comment\" });\n    }\n  });\n\n  // Screenshots\n  app.get(\"/api/games/:gameId/screenshots\", async (req, res) => {\n    try {\n      const screenshots = await storage.getGameScreenshots(req.params.gameId);\n      res.json(screenshots);\n    } catch (error) {\n      console.error(\"Error fetching screenshots:\", error);\n      res.status(500).json({ message: \"Failed to fetch screenshots\" });\n    }\n  });\n\n  app.post(\"/api/games/:gameId/screenshots\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const { imageUrl, caption } = req.body;\n      const screenshot = await storage.createScreenshot({\n        gameId: req.params.gameId,\n        userId: req.session.userId,\n        imageUrl,\n        caption: caption || null,\n      });\n\n      res.json(screenshot);\n    } catch (error) {\n      console.error(\"Error creating screenshot:\", error);\n      res.status(500).json({ message: \"Failed to create screenshot\" });\n    }\n  });\n\n  app.delete(\"/api/screenshots/:screenshotId\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      await storage.deleteScreenshot(req.params.screenshotId, req.session.userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting screenshot:\", error);\n      res.status(500).json({ message: \"Failed to delete screenshot\" });\n    }\n  });\n\n  // Activity Feed\n  app.get(\"/api/activity/feed\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const activities = await storage.getActivityFeed(req.session.userId);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching activity feed:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity feed\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/activity\", async (req, res) => {\n    try {\n      const activities = await storage.getUserActivity(req.params.userId);\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching user activity:\", error);\n      res.status(500).json({ message: \"Failed to fetch user activity\" });\n    }\n  });\n\n  // Trending and Popular Games\n  app.get(\"/api/games/trending\", async (req, res) => {\n    try {\n      const trending = await storage.getTrendingGames();\n      res.json(trending);\n    } catch (error) {\n      console.error(\"Error fetching trending games:\", error);\n      res.status(500).json({ message: \"Failed to fetch trending games\" });\n    }\n  });\n\n  app.get(\"/api/games/popular\", async (req, res) => {\n    try {\n      const popular = await storage.getPopularGames();\n      res.json(popular);\n    } catch (error) {\n      console.error(\"Error fetching popular games:\", error);\n      res.status(500).json({ message: \"Failed to fetch popular games\" });\n    }\n  });\n\n  // Game Recommendations\n  app.get(\"/api/recommendations\", async (req, res) => {\n    try {\n      if (!req.session.userId) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n\n      const recommendations = await storage.getRecommendations(req.session.userId);\n      res.json(recommendations);\n    } catch (error) {\n      console.error(\"Error fetching recommendations:\", error);\n      res.status(500).json({ message: \"Failed to fetch recommendations\" });\n    }\n  });\n\n  // Steam API Integration\n  app.get(\"/api/steam/search\", async (req, res) => {\n    try {\n      const { query } = req.query;\n      if (!query || typeof query !== 'string') {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      const results = await searchSteamGames(query);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error searching Steam:\", error);\n      res.status(500).json({ message: \"Failed to search Steam\" });\n    }\n  });\n\n  app.get(\"/api/steam/details/:appId\", async (req, res) => {\n    try {\n      const details = await getSteamGameDetails(req.params.appId);\n      if (!details) {\n        return res.status(404).json({ message: \"Game not found on Steam\" });\n      }\n      res.json(details);\n    } catch (error) {\n      console.error(\"Error fetching Steam details:\", error);\n      res.status(500).json({ message: \"Failed to fetch game details from Steam\" });\n    }\n  });\n\n  app.post(\"/api/admin/games/import-steam\", requireAdmin, async (req, res) => {\n    try {\n      const { appId, downloadUrl } = req.body;\n      if (!appId) {\n        return res.status(400).json({ message: \"Steam App ID is required\" });\n      }\n\n      const steamData = await getSteamGameDetails(appId);\n      if (!steamData) {\n        return res.status(404).json({ message: \"Game not found on Steam\" });\n      }\n\n      // Build comprehensive description\n      const fullDescription = steamData.fullDescription \n        ? steamData.fullDescription.replace(/<[^>]*>/g, '').slice(0, 1000)\n        : steamData.shortDescription || '';\n\n      // Combine genres and categories for tags\n      const allTags = [\n        ...steamData.genres,\n        ...steamData.categories.slice(0, 5)\n      ].filter((tag, index, self) => self.indexOf(tag) === index);\n\n      // Create game with Steam data\n      const game = await storage.createGame({\n        title: steamData.name,\n        description: fullDescription,\n        imageUrl: steamData.headerImage,\n        category: steamData.genres[0] || 'Action',\n        tags: allTags,\n        downloadUrl: downloadUrl || '', // Admin provides this or can edit later\n        featured: false,\n        isActive: !!downloadUrl, // Only active if download link provided\n      });\n\n      // Create screenshots (up to 8)\n      for (const screenshot of steamData.screenshots.slice(0, 8)) {\n        await storage.createScreenshot({\n          gameId: game.id,\n          userId: req.session.userId!,\n          imageUrl: screenshot.path_full,\n          caption: null,\n        });\n      }\n\n      res.json({ \n        game, \n        steamData: {\n          name: steamData.name,\n          developers: steamData.developers,\n          publishers: steamData.publishers,\n          releaseDate: steamData.releaseDate,\n          genres: steamData.genres,\n          categories: steamData.categories,\n          screenshotCount: steamData.screenshots.length,\n          hasMovies: steamData.movies.length > 0,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error importing from Steam:\", error);\n      res.status(500).json({ message: \"Failed to import game from Steam\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":34961},"client/src/pages/admin/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Key, Gamepad2, Download } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { data: stats } = useQuery<{\n    totalUsers: number;\n    totalLicenses: number;\n    activeLicenses: number;\n    totalGames: number;\n    totalDownloads: number;\n  }>({\n    queryKey: [\"/api/admin/stats\"],\n  });\n\n  const statCards = [\n    {\n      title: \"Total Users\",\n      value: stats?.totalUsers || 0,\n      icon: Users,\n      color: \"text-primary\",\n      testId: \"stat-total-users\",\n    },\n    {\n      title: \"Active Licenses\",\n      value: `${stats?.activeLicenses || 0}/${stats?.totalLicenses || 0}`,\n      icon: Key,\n      color: \"text-accent\",\n      testId: \"stat-active-licenses\",\n    },\n    {\n      title: \"Total Games\",\n      value: stats?.totalGames || 0,\n      icon: Gamepad2,\n      color: \"text-chart-3\",\n      testId: \"stat-total-games\",\n    },\n    {\n      title: \"Total Downloads\",\n      value: stats?.totalDownloads || 0,\n      icon: Download,\n      color: \"text-chart-4\",\n      testId: \"stat-total-downloads\",\n    },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1\n          className=\"text-3xl font-bold mb-2\"\n          style={{ fontFamily: \"Montserrat, sans-serif\" }}\n          data-testid=\"text-admin-dashboard-title\"\n        >\n          Admin Dashboard\n        </h1>\n        <p className=\"text-muted-foreground\" data-testid=\"text-admin-dashboard-subtitle\">\n          Overview of Phoenix Games platform\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {statCards.map((stat) => (\n          <Card key={stat.title} className=\"hover-elevate\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\" data-testid={`${stat.testId}-title`}>\n                {stat.title}\n              </CardTitle>\n              <stat.icon className={`w-5 h-5 ${stat.color}`} />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold\"\n                data-testid={`${stat.testId}-value`}\n              >\n                {stat.value}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-quick-actions-title\">Quick Actions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\" data-testid=\"text-quick-actions-description\">\n            Use the sidebar to navigate to different admin sections for managing games, licenses, and users.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2846},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/layout/admin-layout.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { LayoutDashboard, Gamepad2, Key, Users, LogOut, Home } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/session\"] });\n      toast({ title: \"Logged out successfully\" });\n      setLocation(\"/\");\n    },\n  });\n\n  const menuItems = [\n    { href: \"/admin\", label: \"Dashboard\", icon: LayoutDashboard, testId: \"link-admin-dashboard\" },\n    { href: \"/admin/games\", label: \"Games\", icon: Gamepad2, testId: \"link-admin-games\" },\n    { href: \"/admin/licenses\", label: \"Licenses\", icon: Key, testId: \"link-admin-licenses\" },\n    { href: \"/admin/users\", label: \"Users\", icon: Users, testId: \"link-admin-users\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside className=\"w-64 min-h-screen border-r bg-sidebar\">\n          <div className=\"sticky top-0\">\n            <div className=\"p-6\">\n              <Link href=\"/\">\n                <div className=\"flex items-center gap-3 cursor-pointer hover-elevate rounded-lg p-2 -m-2\" data-testid=\"link-admin-logo\">\n                  <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                    <Gamepad2 className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <div>\n                    <p\n                      className=\"text-lg font-bold\"\n                      style={{ fontFamily: \"Montserrat, sans-serif\" }}\n                    >\n                      Phoenix Games\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Admin Panel</p>\n                  </div>\n                </div>\n              </Link>\n            </div>\n\n            <Separator />\n\n            <nav className=\"p-4 space-y-1\">\n              {menuItems.map((item) => {\n                const isActive = location === item.href;\n                return (\n                  <Link key={item.href} href={item.href}>\n                    <Button\n                      variant=\"ghost\"\n                      className={`w-full justify-start ${isActive ? \"bg-sidebar-accent\" : \"\"}`}\n                      data-testid={item.testId}\n                    >\n                      <item.icon className=\"w-4 h-4 mr-3\" />\n                      {item.label}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </nav>\n\n            <Separator className=\"my-4\" />\n\n            <div className=\"p-4 space-y-1\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"link-back-to-site\">\n                  <Home className=\"w-4 h-4 mr-3\" />\n                  Back to Site\n                </Button>\n              </Link>\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-destructive hover:text-destructive\"\n                onClick={() => logoutMutation.mutate()}\n                data-testid=\"button-admin-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-3\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1\">\n          <div className=\"max-w-7xl mx-auto p-8\">{children}</div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4049},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"replit.md":{"content":"# GameVault - Game Distribution Platform\n\n## Overview\n\nGameVault is a Steam/Epic Games-inspired game distribution platform built with a modern web stack. It provides a beta-access gaming platform where users can discover, browse, and download games using license keys. The application features a sophisticated dark interface with immersive gaming-focused experiences, including a public landing page, authenticated user library, and a comprehensive admin panel for managing games, licenses, and users.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool and development server with HMR support\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management and caching\n\n**UI Component System**\n- Shadcn/ui component library based on Radix UI primitives\n- Tailwind CSS for utility-first styling with custom design tokens\n- Design system inspired by Steam/Epic Games Store with dark theme emphasis\n- Custom color system using CSS variables for theming (HSL-based)\n- Google Fonts integration (Montserrat for headers, Inter/Roboto for body text)\n\n**State Management Strategy**\n- React Query handles all server state with automatic caching and invalidation\n- Session-based authentication state managed through `/api/session` endpoint\n- No global client state management library - component-level state with hooks\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js as the HTTP server\n- TypeScript for type safety across the codebase\n- Session-based authentication using express-session with secure cookie configuration\n- RESTful API design pattern with `/api/*` routes\n\n**Authentication & Authorization**\n- Bcrypt for password hashing\n- Session-based authentication (not JWT)\n- Role-based access control with `isAdmin` flag on user model\n- Protected routes with middleware checking session state\n- License key validation system for user registration\n\n**API Structure**\n- `/api/auth/*` - Authentication endpoints (login, register, logout)\n- `/api/session` - Current user session data\n- `/api/games` - CRUD operations for games\n- `/api/licenses` - License key management\n- `/api/users` - User management\n- `/api/downloads` - Download tracking and statistics\n\n### Data Storage\n\n**Database**\n- PostgreSQL via Neon serverless (connection pooling)\n- Drizzle ORM for type-safe database queries and schema management\n- Schema-first approach with TypeScript types generated from database schema\n\n**Schema Design**\n- `users` table: Authentication, role management, license key association\n- `licenses` table: License keys with activation status and usage tracking\n- `games` table: Game metadata including title, description, images, download URLs, categories, tags, and featured status\n- `downloads` table: Junction table tracking user downloads for analytics\n\n**Data Relationships**\n- One-to-many: User to Downloads\n- One-to-many: Game to Downloads\n- One-to-one: License to User (via `usedBy` foreign key)\n\n### External Dependencies\n\n**Core Runtime Dependencies**\n- `@neondatabase/serverless` - Neon PostgreSQL serverless driver with WebSocket support\n- `drizzle-orm` - Type-safe ORM for PostgreSQL\n- `express-session` - Session management middleware\n- `bcryptjs` - Password hashing and verification\n- `ws` - WebSocket library for Neon database connections\n\n**UI Component Libraries**\n- `@radix-ui/*` - Comprehensive set of unstyled, accessible UI primitives\n- `tailwindcss` - Utility-first CSS framework\n- `class-variance-authority` - Type-safe variant styling\n- `clsx` & `tailwind-merge` - Conditional className utilities\n\n**Form & Validation**\n- `react-hook-form` - Form state management\n- `@hookform/resolvers` - Validation resolver integration\n- `zod` - Schema validation (via drizzle-zod)\n- `drizzle-zod` - Zod schema generation from Drizzle schemas\n\n**Development & Build Tools**\n- `vite` - Fast build tool and dev server\n- `tsx` - TypeScript execution for development\n- `esbuild` - Production bundling for server code\n- `@replit/*` plugins - Replit-specific development enhancements\n\n**Asset Management**\n- Unsplash images used as placeholder game imagery\n- Custom hero banner stored in `/attached_assets/generated_images/`\n- Static assets served from `/public` directory after build","size_bytes":4424},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { games } from \"@shared/schema\";\n\nconst sampleGames = [\n  {\n    title: \"Cyber Legends\",\n    description: \"An epic cyberpunk adventure in a neon-lit metropolis. Battle through intense action sequences, make critical choices, and uncover the truth behind a massive conspiracy. Features stunning visuals, deep storyline, and cutting-edge gameplay mechanics.\",\n    imageUrl: \"https://images.unsplash.com/photo-1542751371-adc38448a05e?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/cyber-legends\",\n    category: \"Action RPG\",\n    tags: [\"Singleplayer\", \"Story Rich\", \"Cyberpunk\", \"Open World\"],\n    featured: true,\n    isActive: true,\n  },\n  {\n    title: \"Fantasy Realms: Shadow Kingdom\",\n    description: \"Embark on a magical journey through mystical lands filled with danger and wonder. Command powerful spells, forge alliances, and battle ancient evils in this immersive fantasy RPG experience.\",\n    imageUrl: \"https://images.unsplash.com/photo-1538481199705-c710c4e965fc?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/fantasy-realms\",\n    category: \"Fantasy RPG\",\n    tags: [\"Multiplayer\", \"Magic\", \"Medieval\", \"Co-op\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Velocity Racers\",\n    description: \"Experience the thrill of high-speed racing on futuristic tracks. Customize your hovercrafts, compete in global tournaments, and master gravity-defying stunts in this adrenaline-pumping racing game.\",\n    imageUrl: \"https://images.unsplash.com/photo-1511882150382-421056c89033?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/velocity-racers\",\n    category: \"Racing\",\n    tags: [\"Multiplayer\", \"Fast-Paced\", \"Competitive\", \"Customization\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Survival Instinct\",\n    description: \"Fight to survive in a post-apocalyptic wasteland. Scavenge for resources, build shelters, and defend against hostile threats in this intense survival simulation with realistic mechanics.\",\n    imageUrl: \"https://images.unsplash.com/photo-1509198397868-475647b2a1e5?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/survival-instinct\",\n    category: \"Survival\",\n    tags: [\"Singleplayer\", \"Crafting\", \"Base Building\", \"Horror\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Tactical Command\",\n    description: \"Lead your forces to victory in this deep strategy game. Plan your moves carefully, manage resources wisely, and outsmart your opponents in epic tactical battles across diverse terrains.\",\n    imageUrl: \"https://images.unsplash.com/photo-1511512578047-dfb367046420?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/tactical-command\",\n    category: \"Strategy\",\n    tags: [\"Turn-Based\", \"Strategy\", \"Tactical\", \"Singleplayer\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Space Odyssey\",\n    description: \"Explore the vast cosmos in this space exploration game. Discover new planets, encounter alien civilizations, and unravel the mysteries of the universe in your interstellar journey.\",\n    imageUrl: \"https://images.unsplash.com/photo-1614732484003-ef9881555dc3?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/space-odyssey\",\n    category: \"Space Exploration\",\n    tags: [\"Exploration\", \"Sci-Fi\", \"Open World\", \"Story Rich\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Dungeon Crawler Elite\",\n    description: \"Delve deep into procedurally generated dungeons filled with treasures and terrors. Master various character classes, collect legendary loot, and face off against powerful bosses.\",\n    imageUrl: \"https://images.unsplash.com/photo-1552820728-8b83bb6b773f?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/dungeon-crawler\",\n    category: \"Roguelike\",\n    tags: [\"Procedural\", \"Loot\", \"RPG\", \"Challenging\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Neon Strike\",\n    description: \"Fast-paced first-person shooter set in a cyberpunk future. Engage in intense firefights, use advanced weaponry, and compete in multiplayer modes with players worldwide.\",\n    imageUrl: \"https://images.unsplash.com/photo-1560419015-7c427e8ae5ba?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/neon-strike\",\n    category: \"FPS\",\n    tags: [\"Multiplayer\", \"Shooter\", \"Competitive\", \"Fast-Paced\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Medieval Quest\",\n    description: \"Become a legendary knight in this action-packed medieval adventure. Battle fierce enemies, explore ancient castles, and uncover the secrets of the old kingdoms. Features epic boss battles and deep character customization.\",\n    imageUrl: \"https://images.unsplash.com/photo-1578632767115-351597cf2477?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/medieval-quest\",\n    category: \"Action Adventure\",\n    tags: [\"Singleplayer\", \"Medieval\", \"Action\", \"RPG Elements\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Quantum Shift\",\n    description: \"Manipulate time and space in this mind-bending puzzle platformer. Solve intricate puzzles using quantum mechanics, navigate through parallel dimensions, and uncover the truth about reality itself.\",\n    imageUrl: \"https://images.unsplash.com/photo-1551103782-8ab07afd45c1?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/quantum-shift\",\n    category: \"Puzzle Platformer\",\n    tags: [\"Puzzle\", \"Platformer\", \"Sci-Fi\", \"Mind-Bending\"],\n    featured: false,\n    isActive: true,\n  },\n  {\n    title: \"Ocean Deep\",\n    description: \"Dive into the mysterious depths of the ocean in this underwater exploration game. Discover lost civilizations, encounter exotic marine life, and uncover ancient treasures hidden beneath the waves.\",\n    imageUrl: \"https://images.unsplash.com/photo-1559827260-dc66d52bef19?w=1920&h=1080&fit=crop\",\n    downloadUrl: \"https://example.com/download/ocean-deep\",\n    category: \"Exploration\",\n    tags: [\"Exploration\", \"Underwater\", \"Adventure\", \"Discovery\"],\n    featured: false,\n    isActive: true,\n  },\n];\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  try {\n    // Check if games already exist\n    const existingGames = await db.select().from(games);\n    \n    if (existingGames.length > 0) {\n      console.log(\"✅ Database already seeded with\", existingGames.length, \"games\");\n      return;\n    }\n\n    // Insert sample games\n    await db.insert(games).values(sampleGames);\n    \n    console.log(\"✅ Successfully seeded database with\", sampleGames.length, \"games\");\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n  }\n}\n\nseed();\n","size_bytes":6759},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/layout/navbar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Gamepad2, Library, Home, LogOut, User, Shield, Download } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Navbar() {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: session } = useQuery<{ user: any }>({\n    queryKey: [\"/api/session\"],\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/session\"] });\n      toast({ title: \"Logged out successfully\" });\n      setLocation(\"/\");\n    },\n  });\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\", icon: Home, testId: \"link-home\" },\n    { href: \"/library\", label: \"Library\", icon: Library, testId: \"link-library\" },\n    { href: \"/launcher\", label: \"Launcher\", icon: Download, testId: \"link-launcher\" },\n  ];\n\n  return (\n    <nav className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"max-w-7xl mx-auto px-6\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/\">\n            <div className=\"flex items-center gap-3 cursor-pointer hover-elevate rounded-lg px-3 py-2 -ml-3\" data-testid=\"link-logo\">\n              <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Gamepad2 className=\"w-6 h-6 text-primary\" />\n              </div>\n              <span\n                className=\"text-xl font-bold\"\n                style={{ fontFamily: \"Montserrat, sans-serif\" }}\n              >\n                Phoenix Games\n              </span>\n            </div>\n          </Link>\n\n          {/* Navigation Links */}\n          <div className=\"flex items-center gap-6\">\n            {navLinks.map((link) => {\n              const isActive = location === link.href;\n              return (\n                <Link key={link.href} href={link.href}>\n                  <Button\n                    variant=\"ghost\"\n                    className={isActive ? \"bg-accent/50\" : \"\"}\n                    data-testid={link.testId}\n                  >\n                    <link.icon className=\"w-4 h-4 mr-2\" />\n                    {link.label}\n                  </Button>\n                </Link>\n              );\n            })}\n\n            {/* User Menu */}\n            {session?.user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"gap-2\" data-testid=\"button-user-menu\">\n                    <User className=\"w-4 h-4\" />\n                    {session.user.username}\n                    {session.user.isAdmin && (\n                      <Badge variant=\"secondary\" className=\"ml-1\">\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        Admin\n                      </Badge>\n                    )}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                  <DropdownMenuItem disabled data-testid=\"menu-username\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    {session.user.username}\n                  </DropdownMenuItem>\n                  {session.user.isAdmin && (\n                    <>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem\n                        onClick={() => setLocation(\"/admin\")}\n                        data-testid=\"menu-admin\"\n                      >\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Admin Panel\n                      </DropdownMenuItem>\n                    </>\n                  )}\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    onClick={() => logoutMutation.mutate()}\n                    data-testid=\"menu-logout\"\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <div className=\"flex items-center gap-3\">\n                <Link href=\"/auth/login\">\n                  <Button variant=\"ghost\" data-testid=\"button-nav-login\">\n                    Sign In\n                  </Button>\n                </Link>\n                <Link href=\"/auth/register\">\n                  <Button data-testid=\"button-nav-register\">Register</Button>\n                </Link>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5179},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/admin/licenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Plus, Copy, CheckCircle2, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { License } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminLicenses() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [customKey, setCustomKey] = useState(\"\");\n\n  const { data: licenses, isLoading } = useQuery<License[]>({\n    queryKey: [\"/api/admin/licenses\"],\n  });\n\n  const createLicenseMutation = useMutation({\n    mutationFn: async (key?: string) => {\n      return await apiRequest(\"POST\", \"/api/admin/licenses\", key ? { key } : {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/licenses\"] });\n      toast({ title: \"License created successfully!\" });\n      setCustomKey(\"\");\n      setIsDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error creating license\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const toggleLicenseMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/licenses/${id}`, { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/licenses\"] });\n      toast({ title: \"License updated successfully!\" });\n    },\n    onError: (error: Error) => {\n      toast({ title: \"Error updating license\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({ title: \"Copied to clipboard!\" });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createLicenseMutation.mutate(customKey || undefined);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1\n            className=\"text-3xl font-bold mb-2\"\n            style={{ fontFamily: \"Montserrat, sans-serif\" }}\n            data-testid=\"text-admin-licenses-title\"\n          >\n            Manage Licenses\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-admin-licenses-subtitle\">\n            Create and manage beta access license keys\n          </p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-license\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create License\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle data-testid=\"text-dialog-license-title\">Create New License</DialogTitle>\n              <DialogDescription data-testid=\"text-dialog-license-description\">\n                Generate a new license key for beta access. Leave blank to auto-generate.\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"licenseKey\" data-testid=\"label-license-key-custom\">\n                  Custom License Key (optional)\n                </Label>\n                <Input\n                  id=\"licenseKey\"\n                  value={customKey}\n                  onChange={(e) => setCustomKey(e.target.value)}\n                  placeholder=\"Leave blank to auto-generate\"\n                  className=\"font-mono\"\n                  data-testid=\"input-license-key-custom\"\n                />\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-generate-license\">\n                  {customKey ? \"Create License\" : \"Generate License\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setCustomKey(\"\");\n                    setIsDialogOpen(false);\n                  }}\n                  data-testid=\"button-cancel-license\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        {isLoading ? (\n          <div className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\">Loading licenses...</p>\n          </div>\n        ) : licenses && licenses.length > 0 ? (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead data-testid=\"header-license-key\">License Key</TableHead>\n                <TableHead data-testid=\"header-status\">Status</TableHead>\n                <TableHead data-testid=\"header-used-by\">Used By</TableHead>\n                <TableHead data-testid=\"header-created\">Created</TableHead>\n                <TableHead data-testid=\"header-license-actions\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {licenses.map((license) => (\n                <TableRow key={license.id} data-testid={`row-license-${license.id}`}>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <code\n                        className=\"text-sm font-mono bg-muted px-2 py-1 rounded\"\n                        data-testid={`text-license-key-${license.id}`}\n                      >\n                        {license.key}\n                      </code>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-8 w-8\"\n                        onClick={() => copyToClipboard(license.key)}\n                        data-testid={`button-copy-${license.id}`}\n                      >\n                        <Copy className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {license.isActive ? (\n                      <Badge className=\"bg-green-500/20 text-green-500 border-green-500/30\" data-testid={`badge-active-${license.id}`}>\n                        <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                        Active\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"secondary\" data-testid={`badge-inactive-${license.id}`}>\n                        <XCircle className=\"w-3 h-3 mr-1\" />\n                        Inactive\n                      </Badge>\n                    )}\n                  </TableCell>\n                  <TableCell data-testid={`text-used-by-${license.id}`}>\n                    {license.usedBy ? (\n                      <Badge variant=\"outline\">Used</Badge>\n                    ) : (\n                      <span className=\"text-muted-foreground\">Not used</span>\n                    )}\n                  </TableCell>\n                  <TableCell data-testid={`text-created-${license.id}`}>\n                    {new Date(license.createdAt).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() =>\n                        toggleLicenseMutation.mutate({\n                          id: license.id,\n                          isActive: !license.isActive,\n                        })\n                      }\n                      data-testid={`button-toggle-${license.id}`}\n                    >\n                      {license.isActive ? \"Deactivate\" : \"Activate\"}\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        ) : (\n          <div className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-licenses\">\n              No licenses yet. Create your first license key!\n            </p>\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8793},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - for both admin and regular users\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  isAdmin: boolean(\"is_admin\").notNull().default(false),\n  isApproved: boolean(\"is_approved\").notNull().default(false),\n  licenseKey: text(\"license_key\"),\n  avatarUrl: text(\"avatar_url\"),\n  bio: text(\"bio\"),\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// License keys table\nexport const licenses = pgTable(\"licenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  usedBy: varchar(\"used_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  usedAt: timestamp(\"used_at\"),\n});\n\n// Games table\nexport const games = pgTable(\"games\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  downloadUrl: text(\"download_url\").notNull().default(''),\n  category: text(\"category\").notNull(),\n  tags: text(\"tags\").array().notNull().default(sql`ARRAY[]::text[]`),\n  featured: boolean(\"featured\").notNull().default(false),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  averageRating: integer(\"average_rating\").default(0),\n  totalRatings: integer(\"total_ratings\").default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Download tracking table\nexport const downloads = pgTable(\"downloads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  downloadedAt: timestamp(\"downloaded_at\").notNull().defaultNow(),\n});\n\n// User library - games added to user's personal collection\nexport const userLibrary = pgTable(\"user_library\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  addedAt: timestamp(\"added_at\").notNull().defaultNow(),\n  hasLocalFiles: boolean(\"has_local_files\").default(false),\n  exePath: text(\"exe_path\"),\n});\n\n// Reviews and ratings table\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Wishlist table\nexport const wishlist = pgTable(\"wishlist\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  addedAt: timestamp(\"added_at\").notNull().defaultNow(),\n});\n\n// Friends/Following system\nexport const follows = pgTable(\"follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  followerId: varchar(\"follower_id\").notNull().references(() => users.id),\n  followingId: varchar(\"following_id\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Achievements table\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  iconUrl: text(\"icon_url\"),\n  points: integer(\"points\").notNull().default(10),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// User achievements (unlocked)\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  achievementId: varchar(\"achievement_id\").notNull().references(() => achievements.id),\n  unlockedAt: timestamp(\"unlocked_at\").notNull().defaultNow(),\n});\n\n// Playtime tracking\nexport const playtime = pgTable(\"playtime\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  totalMinutes: integer(\"total_minutes\").notNull().default(0),\n  lastPlayed: timestamp(\"last_played\"),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Comments on games\nexport const comments = pgTable(\"comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  content: text(\"content\").notNull(),\n  parentId: varchar(\"parent_id\").references((): any => comments.id),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Game screenshots\nexport const screenshots = pgTable(\"screenshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameId: varchar(\"game_id\").notNull().references(() => games.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  imageUrl: text(\"image_url\").notNull(),\n  caption: text(\"caption\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Activity feed\nexport const activities = pgTable(\"activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // 'download', 'review', 'achievement', 'friend', etc\n  gameId: varchar(\"game_id\").references(() => games.id),\n  targetUserId: varchar(\"target_user_id\").references(() => users.id),\n  metadata: text(\"metadata\"), // JSON string for additional data\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  downloads: many(downloads),\n  reviews: many(reviews),\n  wishlist: many(wishlist),\n  library: many(userLibrary),\n  followers: many(follows, { relationName: \"following\" }),\n  following: many(follows, { relationName: \"follower\" }),\n  achievements: many(userAchievements),\n  playtime: many(playtime),\n  comments: many(comments),\n  screenshots: many(screenshots),\n  activities: many(activities),\n  license: one(licenses, {\n    fields: [users.licenseKey],\n    references: [licenses.key],\n  }),\n}));\n\nexport const licensesRelations = relations(licenses, ({ one }) => ({\n  user: one(users, {\n    fields: [licenses.usedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const gamesRelations = relations(games, ({ many }) => ({\n  downloads: many(downloads),\n  reviews: many(reviews),\n  wishlist: many(wishlist),\n  library: many(userLibrary),\n  achievements: many(achievements),\n  playtime: many(playtime),\n  comments: many(comments),\n  screenshots: many(screenshots),\n}));\n\nexport const downloadsRelations = relations(downloads, ({ one }) => ({\n  user: one(users, {\n    fields: [downloads.userId],\n    references: [users.id],\n  }),\n  game: one(games, {\n    fields: [downloads.gameId],\n    references: [games.id],\n  }),\n}));\n\nexport const userLibraryRelations = relations(userLibrary, ({ one }) => ({\n  user: one(users, {\n    fields: [userLibrary.userId],\n    references: [users.id],\n  }),\n  game: one(games, {\n    fields: [userLibrary.gameId],\n    references: [games.id],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  user: one(users, {\n    fields: [reviews.userId],\n    references: [users.id],\n  }),\n  game: one(games, {\n    fields: [reviews.gameId],\n    references: [games.id],\n  }),\n}));\n\nexport const wishlistRelations = relations(wishlist, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlist.userId],\n    references: [users.id],\n  }),\n  game: one(games, {\n    fields: [wishlist.gameId],\n    references: [games.id],\n  }),\n}));\n\nexport const followsRelations = relations(follows, ({ one }) => ({\n  follower: one(users, {\n    relationName: \"follower\",\n    fields: [follows.followerId],\n    references: [users.id],\n  }),\n  following: one(users, {\n    relationName: \"following\",\n    fields: [follows.followingId],\n    references: [users.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ one, many }) => ({\n  game: one(games, {\n    fields: [achievements.gameId],\n    references: [games.id],\n  }),\n  userAchievements: many(userAchievements),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  user: one(users, {\n    fields: [userAchievements.userId],\n    references: [users.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\nexport const playtimeRelations = relations(playtime, ({ one }) => ({\n  user: one(users, {\n    fields: [playtime.userId],\n    references: [users.id],\n  }),\n  game: one(games, {\n    fields: [playtime.gameId],\n    references: [games.id],\n  }),\n}));\n\nexport const commentsRelations = relations(comments, ({ one, many }) => ({\n  user: one(users, {\n    fields: [comments.userId],\n    references: [users.id],\n  }),\n  game: one(games, {\n    fields: [comments.gameId],\n    references: [games.id],\n  }),\n  parent: one(comments, {\n    fields: [comments.parentId],\n    references: [comments.id],\n  }),\n  replies: many(comments),\n}));\n\nexport const screenshotsRelations = relations(screenshots, ({ one }) => ({\n  game: one(games, {\n    fields: [screenshots.gameId],\n    references: [games.id],\n  }),\n  user: one(users, {\n    fields: [screenshots.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const activitiesRelations = relations(activities, ({ one }) => ({\n  user: one(users, {\n    fields: [activities.userId],\n    references: [users.id],\n  }),\n  game: one(games, {\n    fields: [activities.gameId],\n    references: [games.id],\n  }),\n  targetUser: one(users, {\n    fields: [activities.targetUserId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLicenseSchema = createInsertSchema(licenses).omit({\n  id: true,\n  createdAt: true,\n  usedAt: true,\n  usedBy: true,\n});\n\nexport const insertGameSchema = createInsertSchema(games).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDownloadSchema = createInsertSchema(downloads).omit({\n  id: true,\n  downloadedAt: true,\n});\n\nexport const insertUserLibrarySchema = createInsertSchema(userLibrary).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWishlistSchema = createInsertSchema(wishlist).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport const insertFollowSchema = createInsertSchema(follows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserAchievementSchema = createInsertSchema(userAchievements).omit({\n  id: true,\n  unlockedAt: true,\n});\n\nexport const insertPlaytimeSchema = createInsertSchema(playtime).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertCommentSchema = createInsertSchema(comments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertScreenshotSchema = createInsertSchema(screenshots).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertActivitySchema = createInsertSchema(activities).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type License = typeof licenses.$inferSelect;\nexport type InsertLicense = z.infer<typeof insertLicenseSchema>;\n\nexport type Game = typeof games.$inferSelect;\nexport type InsertGame = z.infer<typeof insertGameSchema>;\n\nexport type Download = typeof downloads.$inferSelect;\nexport type InsertDownload = z.infer<typeof insertDownloadSchema>;\n\nexport type UserLibrary = typeof userLibrary.$inferSelect;\nexport type InsertUserLibrary = z.infer<typeof insertUserLibrarySchema>;\n\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\nexport type Wishlist = typeof wishlist.$inferSelect;\nexport type InsertWishlist = z.infer<typeof insertWishlistSchema>;\n\nexport type Follow = typeof follows.$inferSelect;\nexport type InsertFollow = z.infer<typeof insertFollowSchema>;\n\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\n\nexport type UserAchievement = typeof userAchievements.$inferSelect;\nexport type InsertUserAchievement = z.infer<typeof insertUserAchievementSchema>;\n\nexport type Playtime = typeof playtime.$inferSelect;\nexport type InsertPlaytime = z.infer<typeof insertPlaytimeSchema>;\n\nexport type Comment = typeof comments.$inferSelect;\nexport type InsertComment = z.infer<typeof insertCommentSchema>;\n\nexport type Screenshot = typeof screenshots.$inferSelect;\nexport type InsertScreenshot = z.infer<typeof insertScreenshotSchema>;\n\nexport type Activity = typeof activities.$inferSelect;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\n","size_bytes":14004},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Navbar from \"@/components/layout/navbar\";\nimport AdminLayout from \"@/components/layout/admin-layout\";\nimport ProtectedRoute from \"@/components/protected-route\";\n\nimport Home from \"@/pages/home\";\nimport Library from \"@/pages/library\";\nimport GameDetail from \"@/pages/game-detail\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminGames from \"@/pages/admin/games\";\nimport AdminLicenses from \"@/pages/admin/licenses\";\nimport AdminUsers from \"@/pages/admin/users\";\nimport Launcher from \"@/pages/launcher\";\n\nfunction Router() {\n  const [location] = useLocation();\n  const isAuthRoute = location.startsWith(\"/auth\");\n  const isAdminRoute = location.startsWith(\"/admin\");\n\n  return (\n    <>\n      {!isAuthRoute && !isAdminRoute && <Navbar />}\n      <Switch>\n        {/* Public Routes */}\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/auth/login\" component={Login} />\n        <Route path=\"/auth/register\" component={Register} />\n\n        {/* Protected Routes */}\n        <Route path=\"/library\">\n          <ProtectedRoute>\n            <Library />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/launcher\">\n          <ProtectedRoute>\n            <Launcher />\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/game/:id\">\n          <ProtectedRoute>\n            <GameDetail />\n          </ProtectedRoute>\n        </Route>\n\n        {/* Admin Routes */}\n        <Route path=\"/admin\">\n          <ProtectedRoute requireAdmin>\n            <AdminLayout>\n              <AdminDashboard />\n            </AdminLayout>\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/admin/games\">\n          <ProtectedRoute requireAdmin>\n            <AdminLayout>\n              <AdminGames />\n            </AdminLayout>\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/admin/licenses\">\n          <ProtectedRoute requireAdmin>\n            <AdminLayout>\n              <AdminLicenses />\n            </AdminLayout>\n          </ProtectedRoute>\n        </Route>\n        <Route path=\"/admin/users\">\n          <ProtectedRoute requireAdmin>\n            <AdminLayout>\n              <AdminUsers />\n            </AdminLayout>\n          </ProtectedRoute>\n        </Route>\n\n        {/* 404 */}\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Router />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2935},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Session configuration\napp.use(\n  session({\n    secret: process.env.SESSION_SECRET || \"gamevault-secret-key-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n    },\n  })\n);\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2585},"client/src/pages/admin/users.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle2, XCircle } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\nexport default function AdminUsers() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const approveUserMutation = useMutation({\n    mutationFn: async ({ userId, isApproved }: { userId: string; isApproved: boolean }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/users/${userId}`, { isApproved });\n    },\n    onSuccess: (_, { isApproved }) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: isApproved ? \"User approved\" : \"User rejected\",\n        description: isApproved\n          ? \"User can now log in to their account\"\n          : \"User account has been rejected\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h1\n          className=\"text-3xl font-bold mb-2\"\n          style={{ fontFamily: \"Montserrat, sans-serif\" }}\n          data-testid=\"text-users-title\"\n        >\n          Users Management\n        </h1>\n        <p className=\"text-muted-foreground\" data-testid=\"text-users-subtitle\">\n          Manage registered users and their access\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle data-testid=\"text-users-card-title\">Registered Users</CardTitle>\n          <CardDescription data-testid=\"text-users-card-description\">\n            View and manage all registered users. Approve or reject pending accounts.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead data-testid=\"table-head-username\">Username</TableHead>\n                <TableHead data-testid=\"table-head-license\">License Key</TableHead>\n                <TableHead data-testid=\"table-head-role\">Role</TableHead>\n                <TableHead data-testid=\"table-head-status\">Status</TableHead>\n                <TableHead data-testid=\"table-head-registered\">Registered</TableHead>\n                <TableHead data-testid=\"table-head-actions\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {users?.map((user) => (\n                <TableRow key={user.id} data-testid={`user-row-${user.username}`}>\n                  <TableCell className=\"font-medium\" data-testid={`user-username-${user.username}`}>\n                    {user.username}\n                  </TableCell>\n                  <TableCell data-testid={`user-license-${user.username}`}>\n                    {user.licenseKey || \"N/A\"}\n                  </TableCell>\n                  <TableCell data-testid={`user-role-${user.username}`}>\n                    {user.isAdmin ? (\n                      <Badge data-testid={`badge-admin-${user.username}`}>Admin</Badge>\n                    ) : (\n                      <Badge variant=\"secondary\" data-testid={`badge-user-${user.username}`}>User</Badge>\n                    )}\n                  </TableCell>\n                  <TableCell data-testid={`user-status-${user.username}`}>\n                    {user.isApproved ? (\n                      <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                        Approved\n                      </Badge>\n                    ) : (\n                      <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-600\">\n                        Pending\n                      </Badge>\n                    )}\n                  </TableCell>\n                  <TableCell data-testid={`user-registered-${user.username}`}>\n                    {new Date(user.createdAt).toLocaleDateString()}\n                  </TableCell>\n                  <TableCell data-testid={`user-actions-${user.username}`}>\n                    {!user.isAdmin && (\n                      <div className=\"flex gap-2\">\n                        {!user.isApproved && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => approveUserMutation.mutate({ userId: user.id, isApproved: true })}\n                            disabled={approveUserMutation.isPending}\n                            data-testid={`button-approve-${user.username}`}\n                          >\n                            <CheckCircle2 className=\"w-4 h-4 mr-1\" />\n                            Approve\n                          </Button>\n                        )}\n                        {user.isApproved && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => approveUserMutation.mutate({ userId: user.id, isApproved: false })}\n                            disabled={approveUserMutation.isPending}\n                            data-testid={`button-revoke-${user.username}`}\n                          >\n                            <XCircle className=\"w-4 h-4 mr-1\" />\n                            Revoke\n                          </Button>\n                        )}\n                      </div>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6035},"client/src/pages/library.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Download, Search, Filter } from \"lucide-react\";\nimport type { Game } from \"@shared/schema\";\n\nexport default function Library() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [viewMode, setViewMode] = useState<\"my-library\" | \"all-games\">(\"my-library\");\n\n  const { data: allGames, isLoading: allGamesLoading } = useQuery<Game[]>({\n    queryKey: [\"/api/games\"],\n  });\n\n  const { data: myLibrary, isLoading: myLibraryLoading } = useQuery<any[]>({\n    queryKey: [\"/api/library\"],\n  });\n\n  const isLoading = viewMode === \"my-library\" ? myLibraryLoading : allGamesLoading;\n\n  const games = viewMode === \"my-library\" \n    ? myLibrary?.map(entry => entry.game).filter(Boolean) \n    : allGames;\n\n  const filteredGames =\n    games\n      ?.filter((game) => {\n        const matchesSearch =\n          game.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n          game.description.toLowerCase().includes(searchQuery.toLowerCase());\n        const matchesCategory =\n          categoryFilter === \"all\" || game.category === categoryFilter;\n        return matchesSearch && matchesCategory;\n      })\n      .sort((a, b) => {\n        if (sortBy === \"recent\") {\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        } else if (sortBy === \"alphabetical\") {\n          return a.title.localeCompare(b.title);\n        }\n        return 0;\n      }) || [];\n\n  const categories = Array.from(new Set(games?.map((g) => g.category) || []));\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1\n                className=\"text-4xl font-bold mb-2\"\n                style={{ fontFamily: \"Montserrat, sans-serif\" }}\n                data-testid=\"text-library-title\"\n              >\n                Game Library\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"text-library-subtitle\">\n                {viewMode === \"my-library\" \n                  ? \"Your personal game collection\"\n                  : \"Browse and download all available games\"}\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === \"my-library\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"my-library\")}\n                data-testid=\"button-my-library\"\n              >\n                My Library\n              </Button>\n              <Button\n                variant={viewMode === \"all-games\" ? \"default\" : \"outline\"}\n                onClick={() => setViewMode(\"all-games\")}\n                data-testid=\"button-all-games\"\n              >\n                All Games\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col md:flex-row gap-4 mb-8\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search games...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n            <SelectTrigger className=\"w-full md:w-[200px]\" data-testid=\"select-category\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              <SelectValue placeholder=\"Category\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Categories</SelectItem>\n              {categories.map((cat) => (\n                <SelectItem key={cat} value={cat}>\n                  {cat}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-full md:w-[200px]\" data-testid=\"select-sort\">\n              <SelectValue placeholder=\"Sort by\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"recent\">Recently Added</SelectItem>\n              <SelectItem value=\"alphabetical\">Alphabetical</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Games Grid */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card\n                key={i}\n                className=\"overflow-hidden animate-pulse\"\n                data-testid={`skeleton-library-game-${i}`}\n              >\n                <div className=\"aspect-[460/215] bg-muted\" />\n                <div className=\"p-4 space-y-3\">\n                  <div className=\"h-5 bg-muted rounded\" />\n                  <div className=\"h-4 bg-muted rounded w-2/3\" />\n                </div>\n              </Card>\n            ))}\n          </div>\n        ) : filteredGames.length === 0 ? (\n          <Card className=\"p-12 text-center\">\n            <p className=\"text-muted-foreground text-lg\" data-testid=\"text-no-games\">\n              No games found matching your criteria\n            </p>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredGames.map((game) => (\n              <Link key={game.id} href={`/game/${game.id}`}>\n                <Card\n                  className=\"group overflow-hidden hover-elevate transition-all duration-300 cursor-pointer\"\n                  data-testid={`card-library-game-${game.id}`}\n                >\n                  <div className=\"relative aspect-[460/215] overflow-hidden bg-muted\">\n                    <img\n                      src={game.imageUrl}\n                      alt={game.title}\n                      className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                      data-testid={`img-library-game-${game.id}`}\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                    <div className=\"absolute bottom-4 left-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                      <Button\n                        size=\"sm\"\n                        className=\"w-full\"\n                        data-testid={`button-library-download-${game.id}`}\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download\n                      </Button>\n                    </div>\n                  </div>\n                  <div className=\"p-4\">\n                    <h3\n                      className=\"font-bold text-lg mb-1 line-clamp-1\"\n                      data-testid={`text-game-title-${game.id}`}\n                    >\n                      {game.title}\n                    </h3>\n                    <div\n                      className=\"text-sm text-muted-foreground line-clamp-2\"\n                      data-testid={`text-game-description-${game.id}`}\n                      dangerouslySetInnerHTML={{ __html: game.description }}\n                    />\n                  </div>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8184},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Gamepad2, Lock, User } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User as UserType } from \"@shared/schema\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isAdminMode, setIsAdminMode] = useState(false);\n\n  const { data: session } = useQuery<{ user: UserType | null }>({\n    queryKey: [\"/api/session\"],\n  });\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (session?.user) {\n      setLocation(\"/\");\n    }\n  }, [session, setLocation]);\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { username: string; password: string }) => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/session\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: data.isAdmin ? \"Logged in as admin\" : \"Successfully logged in\",\n      });\n      setLocation(data.user.isAdmin ? \"/admin\" : \"/library\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isAdminMode) {\n      loginMutation.mutate({ username: \"admin\", password });\n    } else {\n      loginMutation.mutate({ username, password });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center px-6\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-16 h-16 rounded-lg bg-primary/10 flex items-center justify-center\">\n              <Gamepad2 className=\"w-8 h-8 text-primary\" />\n            </div>\n          </div>\n          <h1\n            className=\"text-3xl font-bold mb-2\"\n            style={{ fontFamily: \"Montserrat, sans-serif\" }}\n            data-testid=\"text-login-title\"\n          >\n            Welcome Back\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-login-subtitle\">\n            Sign in to access your game library\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle data-testid=\"text-signin-title\">Sign In</CardTitle>\n            <CardDescription data-testid=\"text-signin-description\">\n              Enter your credentials to continue\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"mb-4 flex gap-2\">\n              <Button\n                type=\"button\"\n                variant={!isAdminMode ? \"default\" : \"outline\"}\n                onClick={() => setIsAdminMode(false)}\n                className=\"flex-1\"\n              >\n                User Login\n              </Button>\n              <Button\n                type=\"button\"\n                variant={isAdminMode ? \"default\" : \"outline\"}\n                onClick={() => setIsAdminMode(true)}\n                className=\"flex-1\"\n              >\n                Admin Login\n              </Button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              {!isAdminMode && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\" data-testid=\"label-username\">\n                    Username\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      placeholder=\"Enter your username\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      className=\"pl-10\"\n                      required\n                      data-testid=\"input-username\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\" data-testid=\"label-password\">\n                  {isAdminMode ? \"Admin Password\" : \"Password\"}\n                </Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder={isAdminMode ? \"Enter admin password\" : \"Enter your password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    className=\"pl-10\"\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : isAdminMode ? \"Sign In as Admin\" : \"Sign In\"}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"text-register-prompt\">\n                Don't have an account?{\" \"}\n                <Button\n                  variant=\"link\"\n                  className=\"p-0 h-auto\"\n                  onClick={() => setLocation(\"/auth/register\")}\n                  data-testid=\"button-register-link\"\n                >\n                  Register here\n                </Button>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6451},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/launcher.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Download, Github, Star, Gamepad2, Sparkles, Tag, Search, PlayCircle } from \"lucide-react\";\n\nexport default function Launcher() {\n  const [downloading, setDownloading] = useState(false);\n\n  const handleDownload = () => {\n    setDownloading(true);\n    // Simulate download\n    window.open(\"https://github.com/MikeHenker/Pixelvault/releases\", \"_blank\");\n    setTimeout(() => setDownloading(false), 2000);\n  };\n\n  const features = [\n    {\n      icon: Sparkles,\n      title: \"Beautiful Modern UI\",\n      description: \"Glassmorphism design with blur effects and vibrant gradients\"\n    },\n    {\n      icon: Gamepad2,\n      title: \"Drag & Drop Games\",\n      description: \"Simply drag any .exe file to add games to your library\"\n    },\n    {\n      icon: Search,\n      title: \"Smart Search & Filters\",\n      description: \"Instantly find games with powerful search and filtering\"\n    },\n    {\n      icon: Tag,\n      title: \"Tags & Organization\",\n      description: \"Organize games with custom tags and favorites\"\n    },\n    {\n      icon: PlayCircle,\n      title: \"Steam Integration\",\n      description: \"Import Steam games and fetch metadata automatically\"\n    },\n    {\n      icon: Star,\n      title: \"Play Statistics\",\n      description: \"Track play count and last played dates\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        {/* Header */}\n        <div className=\"mb-8 text-center\">\n          <h1\n            className=\"text-5xl font-bold mb-4 bg-gradient-to-r from-purple-400 via-pink-500 to-teal-400 bg-clip-text text-transparent\"\n            style={{ fontFamily: \"Montserrat, sans-serif\" }}\n            data-testid=\"text-launcher-title\"\n          >\n            🎮 PixelVault Launcher\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"text-launcher-subtitle\">\n            Your Gaming Universe - A stunning, modern game library manager for Windows\n          </p>\n          <div className=\"flex gap-3 justify-center mt-6\">\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              Windows 10/11\n            </Badge>\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              .NET 6.0+\n            </Badge>\n            <Badge variant=\"secondary\" className=\"text-sm\">\n              MIT License\n            </Badge>\n          </div>\n        </div>\n\n        {/* Hero Card */}\n        <Card className=\"mb-8 overflow-hidden\">\n          <div className=\"relative aspect-[21/9] bg-gradient-to-br from-purple-500/20 via-pink-500/20 to-teal-500/20\">\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center\">\n                <Gamepad2 className=\"w-24 h-24 mx-auto mb-4 text-primary\" />\n                <h2 className=\"text-3xl font-bold mb-4\">Desktop Game Library Manager</h2>\n                <Button\n                  size=\"lg\"\n                  onClick={handleDownload}\n                  disabled={downloading}\n                  className=\"gap-2\"\n                  data-testid=\"button-download-launcher\"\n                >\n                  <Download className=\"w-5 h-5\" />\n                  {downloading ? \"Opening Download...\" : \"Download PixelVault\"}\n                </Button>\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"gap-2 ml-3\"\n                  onClick={() => window.open(\"https://github.com/MikeHenker/Pixelvault\", \"_blank\")}\n                  data-testid=\"button-github\"\n                >\n                  <Github className=\"w-5 h-5\" />\n                  View on GitHub\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Tabs */}\n        <Tabs defaultValue=\"features\" className=\"mb-8\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"features\" data-testid=\"tab-features\">Features</TabsTrigger>\n            <TabsTrigger value=\"installation\" data-testid=\"tab-installation\">Installation</TabsTrigger>\n            <TabsTrigger value=\"usage\" data-testid=\"tab-usage\">Usage Guide</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"features\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {features.map((feature, index) => (\n                <Card key={index} className=\"hover-elevate\" data-testid={`card-feature-${index}`}>\n                  <CardHeader>\n                    <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-3\">\n                      <feature.icon className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription>{feature.description}</CardDescription>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"installation\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Installation Steps</CardTitle>\n                <CardDescription>Get started with PixelVault in minutes</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-semibold flex items-center gap-2\">\n                    <span className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm\">1</span>\n                    Download\n                  </h3>\n                  <p className=\"text-muted-foreground ml-8\">\n                    Download the latest release from the GitHub releases page\n                  </p>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"ml-8\"\n                    onClick={() => window.open(\"https://github.com/MikeHenker/Pixelvault/releases\", \"_blank\")}\n                  >\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Go to Releases\n                  </Button>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-semibold flex items-center gap-2\">\n                    <span className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm\">2</span>\n                    Extract & Run\n                  </h3>\n                  <p className=\"text-muted-foreground ml-8\">\n                    Extract the ZIP file and run <code className=\"bg-muted px-2 py-1 rounded\">GameLibrary.exe</code>\n                  </p>\n                </div>\n\n                <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n                  <h4 className=\"font-semibold mb-2\">Requirements</h4>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                    <li>Windows 10 or Windows 11</li>\n                    <li>.NET 6.0 Runtime or later</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"usage\" className=\"mt-6\">\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Adding Games</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Method 1: Drag & Drop</h4>\n                    <p className=\"text-muted-foreground\">\n                      Simply drag any <code className=\"bg-muted px-2 py-1 rounded\">.exe</code> file onto the PixelVault window\n                    </p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Method 2: Steam Import</h4>\n                    <div className=\"text-muted-foreground\">\n                      Click the <Badge variant=\"outline\">📥 Import</Badge> button to automatically import all your Steam games\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Managing Your Library</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <Search className=\"w-5 h-5 text-primary mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold\">Search</h4>\n                      <p className=\"text-sm text-muted-foreground\">Use the search box in the sidebar to find games instantly</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <Star className=\"w-5 h-5 text-primary mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold\">Filters</h4>\n                      <p className=\"text-sm text-muted-foreground\">Click Favorites, Recent, or All Games to filter your library</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start gap-3\">\n                    <Tag className=\"w-5 h-5 text-primary mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold\">Tags</h4>\n                      <p className=\"text-sm text-muted-foreground\">Add custom tags to categorize and organize your games</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Pro Tips</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">💡 Mark games as favorites with ⭐ for quick access</p>\n                  <p className=\"text-sm text-muted-foreground\">💡 Add personal notes to remember where you left off</p>\n                  <p className=\"text-sm text-muted-foreground\">💡 Sort by \"Most Played\" to see your favorite games</p>\n                  <p className=\"text-sm text-muted-foreground\">💡 Your library auto-saves to AppData</p>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n\n        {/* Footer */}\n        <Card className=\"mt-8 bg-gradient-to-br from-purple-500/10 via-pink-500/10 to-teal-500/10\">\n          <CardContent className=\"p-8 text-center\">\n            <h3 className=\"text-2xl font-bold mb-3\">Ready to organize your gaming library?</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Download PixelVault now and experience the future of game library management\n            </p>\n            <Button\n              size=\"lg\"\n              onClick={handleDownload}\n              disabled={downloading}\n              className=\"gap-2\"\n            >\n              <Download className=\"w-5 h-5\" />\n              Download Now\n            </Button>\n            <p className=\"text-xs text-muted-foreground mt-4\">\n              Made with 💜 by the community • MIT License\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11773},"LAUNCHER_TUTORIAL.md":{"content":"\n# 🎮 PixelVault Launcher - Tutorial & Integration Guide\n\nThis guide explains how to use the PixelVault launcher download feature integrated into Phoenix Games.\n\n## 📖 Overview\n\nPixelVault is a beautiful desktop game library manager for Windows that complements Phoenix Games by providing a local launcher for your downloaded games. While Phoenix Games is your online game store and library, PixelVault helps you organize and launch games on your desktop.\n\n## 🚀 Quick Start\n\n### Accessing the Launcher Page\n\n1. Log in to Phoenix Games\n2. Click the **\"Launcher\"** tab in the navigation bar\n3. Browse features, installation guide, and usage instructions\n\n### Downloading PixelVault\n\n1. Visit the **Launcher** page\n2. Click the **\"Download PixelVault\"** button\n3. You'll be redirected to the GitHub releases page\n4. Download the latest release ZIP file\n5. Extract and run `GameLibrary.exe`\n\n## 🔄 Workflow Integration\n\n### Recommended Workflow\n\n1. **Browse & Download on Phoenix Games**\n   - Browse the game catalog\n   - Add games to your library\n   - Download game files\n\n2. **Organize with PixelVault**\n   - Drag downloaded `.exe` files into PixelVault\n   - Organize with tags and favorites\n   - Launch games from one beautiful interface\n\n3. **Track & Manage**\n   - Phoenix Games tracks your online library\n   - PixelVault tracks local files and playtime\n   - Both work together seamlessly\n\n## ✨ Features Comparison\n\n| Feature | Phoenix Games | PixelVault |\n|---------|--------------|------------|\n| Browse Games | ✅ | ❌ |\n| Download Games | ✅ | ❌ |\n| Online Library | ✅ | ❌ |\n| Launch Games | ❌ | ✅ |\n| Local Organization | ❌ | ✅ |\n| Playtime Tracking | 🔄 (Coming Soon) | ✅ |\n| Steam Integration | ❌ | ✅ |\n| Offline Access | ❌ | ✅ |\n\n## 🎯 Key Features\n\n### PixelVault Desktop Launcher\n\n- **Glassmorphism UI** - Beautiful modern design with blur effects\n- **Drag & Drop** - Add games by dragging `.exe` files\n- **Steam Integration** - Import Steam games automatically\n- **Smart Search** - Find games instantly\n- **Tags & Organization** - Categorize with custom tags\n- **Favorites** - Quick access to favorite games\n- **Play Statistics** - Track playtime and last played\n- **Offline First** - Works without internet connection\n\n### Phoenix Games Web Platform\n\n- **Online Store** - Browse and discover games\n- **User Accounts** - Secure authentication\n- **Library Management** - Track downloaded games\n- **Admin Panel** - Manage games and users\n- **License System** - Controlled access\n\n## 📋 System Requirements\n\n### PixelVault Desktop\n- Windows 10 or Windows 11\n- .NET 6.0 Runtime or later\n- ~50 MB disk space\n\n### Phoenix Games Web\n- Modern web browser (Chrome, Firefox, Edge, Safari)\n- Internet connection\n- User account\n\n## 🛠️ Installation Guide\n\n### Installing PixelVault\n\n1. **Download**\n   ```\n   Visit: https://github.com/MikeHenker/Pixelvault/releases\n   Download: Latest release ZIP file\n   ```\n\n2. **Extract**\n   ```\n   Right-click ZIP file → Extract All\n   Choose destination folder\n   ```\n\n3. **Run**\n   ```\n   Navigate to extracted folder\n   Run: GameLibrary.exe\n   ```\n\n4. **First Launch**\n   - PixelVault will create necessary folders\n   - Library saves to: `%AppData%\\GameLibrary`\n\n## 📚 Usage Guide\n\n### Adding Games from Phoenix Games to PixelVault\n\n1. **Download from Phoenix Games**\n   - Browse the game library\n   - Click on a game\n   - Click \"Download Now\"\n   - Save the game files to your PC\n\n2. **Add to PixelVault**\n   - Open PixelVault\n   - Drag the game's `.exe` file into PixelVault\n   - PixelVault will extract icon and metadata\n   - Add tags, notes, and mark as favorite\n\n3. **Launch & Play**\n   - Click game card in PixelVault\n   - Game launches automatically\n   - Playtime is tracked\n\n### Organizing Your Library\n\n**Search**\n- Use search box to filter by name\n- Results update instantly\n\n**Filters**\n- ⭐ **Favorites** - Games you've starred\n- 🕒 **Recent** - Last 10 played games\n- 🎮 **All Games** - Complete library\n\n**Sorting**\n- Name (A-Z or Z-A)\n- Most Played\n- Recently Added\n- Last Played\n\n**Tags**\n- Add custom tags to games\n- Filter by tag\n- Organize by genre, mood, etc.\n\n## 💡 Pro Tips\n\n### Best Practices\n\n1. **Keep Downloads Organized**\n   - Create a \"Games\" folder on your PC\n   - Store all game downloads there\n   - Add to PixelVault from one location\n\n2. **Use Tags Effectively**\n   - Tag by genre: \"RPG\", \"Action\", \"Strategy\"\n   - Tag by mood: \"Chill\", \"Intense\", \"Multiplayer\"\n   - Tag by status: \"Playing\", \"Completed\", \"Backlog\"\n\n3. **Leverage Both Platforms**\n   - Phoenix Games: Online discovery and download\n   - PixelVault: Local organization and launching\n   - Together: Complete gaming experience\n\n4. **Backup Your Data**\n   - Phoenix Games: Synced to cloud automatically\n   - PixelVault: Backup `%AppData%\\GameLibrary`\n\n## 🔧 Troubleshooting\n\n### PixelVault Won't Start\n- Install .NET 6.0 Runtime: https://dotnet.microsoft.com/download\n- Run as Administrator\n- Check Windows Defender/Antivirus\n\n### Games Won't Launch\n- Verify `.exe` path is correct\n- Check game has necessary dependencies\n- Run PixelVault as Administrator\n\n### Steam Import Not Working\n- Ensure Steam is installed\n- Check Steam library folder exists\n- Restart PixelVault\n\n## 🆘 Support\n\n### Phoenix Games Support\n- GitHub: https://github.com/yourusername/phoenix-games\n- Contact admin through the platform\n\n### PixelVault Support\n- GitHub: https://github.com/MikeHenker/Pixelvault\n- Issues: https://github.com/MikeHenker/Pixelvault/issues\n\n## 📄 License\n\nBoth projects are open source:\n- Phoenix Games: MIT License\n- PixelVault: MIT License\n\n## 🙏 Credits\n\n- **Phoenix Games** - Web-based game library platform\n- **PixelVault** - Desktop launcher by [@MikeHenker](https://github.com/MikeHenker)\n\n---\n\n**Made with 💜 by the gaming community**\n","size_bytes":5844},"server/steam-api.ts":{"content":"import axios from 'axios';\n\nconst STEAM_API_BASE = 'https://store.steampowered.com/api';\n\nexport interface SteamGameDetails {\n  appId: string;\n  name: string;\n  shortDescription: string;\n  detailedDescription: string;\n  headerImage: string;\n  developers: string[];\n  publishers: string[];\n  genres: string[];\n  releaseDate: string;\n  screenshots: Array<{\n    id: number;\n    pathThumbnail: string;\n    pathFull: string;\n  }>;\n  price: string;\n  metacritic: number | null;\n  recommendations: number;\n}\n\nexport async function getSteamGameDetails(appId: string): Promise<SteamGameDetails | null> {\n  try {\n    const response = await axios.get(`https://store.steampowered.com/api/appdetails?appids=${appId}`);\n    const data = response.data[appId];\n\n    if (!data || !data.success) {\n      return null;\n    }\n\n    const gameData = data.data;\n\n    return {\n      appId,\n      name: gameData.name,\n      shortDescription: gameData.short_description,\n      detailedDescription: gameData.detailed_description?.replace(/<[^>]*>/g, '') || gameData.short_description, // Strip HTML tags\n      headerImage: gameData.header_image,\n      developers: gameData.developers || [],\n      publishers: gameData.publishers || [],\n      genres: gameData.genres?.map((g: any) => g.description) || [],\n      releaseDate: gameData.release_date?.date || '',\n      screenshots: gameData.screenshots || [],\n      price: gameData.price_overview?.final_formatted || 'Free',\n      metacritic: gameData.metacritic?.score || null,\n      recommendations: gameData.recommendations?.total || 0,\n    };\n  } catch (error) {\n    console.error(\"Error fetching Steam game details:\", error);\n    return null;\n  }\n}\n\nexport async function searchSteamGames(query: string): Promise<Array<{ appId: string; name: string }>> {\n  try {\n    // Steam doesn't have an official search API, so we'll use a workaround\n    // This searches the Steam store and returns app IDs\n    const response = await axios.get('https://steamcommunity.com/actions/SearchApps/' + encodeURIComponent(query));\n\n    if (Array.isArray(response.data)) {\n      return response.data.slice(0, 10).map((game: any) => ({\n        appId: game.appid.toString(),\n        name: game.name\n      }));\n    }\n\n    return [];\n  } catch (error) {\n    console.error('Error searching Steam games:', error);\n    return [];\n  }\n}","size_bytes":2331}},"version":2}